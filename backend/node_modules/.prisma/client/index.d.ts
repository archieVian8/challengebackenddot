
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model EventOrganizer
 * 
 */
export type EventOrganizer = $Result.DefaultSelection<Prisma.$EventOrganizerPayload>
/**
 * Model AcademicEvents
 * 
 */
export type AcademicEvents = $Result.DefaultSelection<Prisma.$AcademicEventsPayload>
/**
 * Model UserJoinAcademicEvents
 * 
 */
export type UserJoinAcademicEvents = $Result.DefaultSelection<Prisma.$UserJoinAcademicEventsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Gender: {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const EventJenjang: {
  SekolahDasar: 'SekolahDasar',
  SekolahMenengahPertama: 'SekolahMenengahPertama',
  SekolahMenengahAtas: 'SekolahMenengahAtas',
  Universitas: 'Universitas',
  Umum: 'Umum'
};

export type EventJenjang = (typeof EventJenjang)[keyof typeof EventJenjang]


export const EventHeld: {
  luring: 'luring',
  daring: 'daring'
};

export type EventHeld = (typeof EventHeld)[keyof typeof EventHeld]


export const CapacityStatus: {
  full: 'full',
  available: 'available'
};

export type CapacityStatus = (typeof CapacityStatus)[keyof typeof CapacityStatus]

}

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type EventJenjang = $Enums.EventJenjang

export const EventJenjang: typeof $Enums.EventJenjang

export type EventHeld = $Enums.EventHeld

export const EventHeld: typeof $Enums.EventHeld

export type CapacityStatus = $Enums.CapacityStatus

export const CapacityStatus: typeof $Enums.CapacityStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.eventOrganizer`: Exposes CRUD operations for the **EventOrganizer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EventOrganizers
    * const eventOrganizers = await prisma.eventOrganizer.findMany()
    * ```
    */
  get eventOrganizer(): Prisma.EventOrganizerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.academicEvents`: Exposes CRUD operations for the **AcademicEvents** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AcademicEvents
    * const academicEvents = await prisma.academicEvents.findMany()
    * ```
    */
  get academicEvents(): Prisma.AcademicEventsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userJoinAcademicEvents`: Exposes CRUD operations for the **UserJoinAcademicEvents** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserJoinAcademicEvents
    * const userJoinAcademicEvents = await prisma.userJoinAcademicEvents.findMany()
    * ```
    */
  get userJoinAcademicEvents(): Prisma.UserJoinAcademicEventsDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.2.1
   * Query Engine version: 4123509d24aa4dede1e864b46351bf2790323b69
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    EventOrganizer: 'EventOrganizer',
    AcademicEvents: 'AcademicEvents',
    UserJoinAcademicEvents: 'UserJoinAcademicEvents'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "eventOrganizer" | "academicEvents" | "userJoinAcademicEvents"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      EventOrganizer: {
        payload: Prisma.$EventOrganizerPayload<ExtArgs>
        fields: Prisma.EventOrganizerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventOrganizerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventOrganizerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload>
          }
          findFirst: {
            args: Prisma.EventOrganizerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventOrganizerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload>
          }
          findMany: {
            args: Prisma.EventOrganizerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload>[]
          }
          create: {
            args: Prisma.EventOrganizerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload>
          }
          createMany: {
            args: Prisma.EventOrganizerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.EventOrganizerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload>
          }
          update: {
            args: Prisma.EventOrganizerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload>
          }
          deleteMany: {
            args: Prisma.EventOrganizerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventOrganizerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventOrganizerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventOrganizerPayload>
          }
          aggregate: {
            args: Prisma.EventOrganizerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEventOrganizer>
          }
          groupBy: {
            args: Prisma.EventOrganizerGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventOrganizerGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventOrganizerCountArgs<ExtArgs>
            result: $Utils.Optional<EventOrganizerCountAggregateOutputType> | number
          }
        }
      }
      AcademicEvents: {
        payload: Prisma.$AcademicEventsPayload<ExtArgs>
        fields: Prisma.AcademicEventsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AcademicEventsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicEventsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AcademicEventsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicEventsPayload>
          }
          findFirst: {
            args: Prisma.AcademicEventsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicEventsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AcademicEventsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicEventsPayload>
          }
          findMany: {
            args: Prisma.AcademicEventsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicEventsPayload>[]
          }
          create: {
            args: Prisma.AcademicEventsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicEventsPayload>
          }
          createMany: {
            args: Prisma.AcademicEventsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AcademicEventsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicEventsPayload>
          }
          update: {
            args: Prisma.AcademicEventsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicEventsPayload>
          }
          deleteMany: {
            args: Prisma.AcademicEventsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AcademicEventsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AcademicEventsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AcademicEventsPayload>
          }
          aggregate: {
            args: Prisma.AcademicEventsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAcademicEvents>
          }
          groupBy: {
            args: Prisma.AcademicEventsGroupByArgs<ExtArgs>
            result: $Utils.Optional<AcademicEventsGroupByOutputType>[]
          }
          count: {
            args: Prisma.AcademicEventsCountArgs<ExtArgs>
            result: $Utils.Optional<AcademicEventsCountAggregateOutputType> | number
          }
        }
      }
      UserJoinAcademicEvents: {
        payload: Prisma.$UserJoinAcademicEventsPayload<ExtArgs>
        fields: Prisma.UserJoinAcademicEventsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserJoinAcademicEventsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserJoinAcademicEventsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserJoinAcademicEventsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserJoinAcademicEventsPayload>
          }
          findFirst: {
            args: Prisma.UserJoinAcademicEventsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserJoinAcademicEventsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserJoinAcademicEventsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserJoinAcademicEventsPayload>
          }
          findMany: {
            args: Prisma.UserJoinAcademicEventsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserJoinAcademicEventsPayload>[]
          }
          create: {
            args: Prisma.UserJoinAcademicEventsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserJoinAcademicEventsPayload>
          }
          createMany: {
            args: Prisma.UserJoinAcademicEventsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserJoinAcademicEventsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserJoinAcademicEventsPayload>
          }
          update: {
            args: Prisma.UserJoinAcademicEventsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserJoinAcademicEventsPayload>
          }
          deleteMany: {
            args: Prisma.UserJoinAcademicEventsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserJoinAcademicEventsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserJoinAcademicEventsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserJoinAcademicEventsPayload>
          }
          aggregate: {
            args: Prisma.UserJoinAcademicEventsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserJoinAcademicEvents>
          }
          groupBy: {
            args: Prisma.UserJoinAcademicEventsGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserJoinAcademicEventsGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserJoinAcademicEventsCountArgs<ExtArgs>
            result: $Utils.Optional<UserJoinAcademicEventsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    eventOrganizer?: EventOrganizerOmit
    academicEvents?: AcademicEventsOmit
    userJoinAcademicEvents?: UserJoinAcademicEventsOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    userAcademicEvents: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userAcademicEvents?: boolean | UserCountOutputTypeCountUserAcademicEventsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserAcademicEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserJoinAcademicEventsWhereInput
  }


  /**
   * Count Type EventOrganizerCountOutputType
   */

  export type EventOrganizerCountOutputType = {
    events: number
  }

  export type EventOrganizerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | EventOrganizerCountOutputTypeCountEventsArgs
  }

  // Custom InputTypes
  /**
   * EventOrganizerCountOutputType without action
   */
  export type EventOrganizerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizerCountOutputType
     */
    select?: EventOrganizerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventOrganizerCountOutputType without action
   */
  export type EventOrganizerCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcademicEventsWhereInput
  }


  /**
   * Count Type AcademicEventsCountOutputType
   */

  export type AcademicEventsCountOutputType = {
    userJoins: number
  }

  export type AcademicEventsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userJoins?: boolean | AcademicEventsCountOutputTypeCountUserJoinsArgs
  }

  // Custom InputTypes
  /**
   * AcademicEventsCountOutputType without action
   */
  export type AcademicEventsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEventsCountOutputType
     */
    select?: AcademicEventsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AcademicEventsCountOutputType without action
   */
  export type AcademicEventsCountOutputTypeCountUserJoinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserJoinAcademicEventsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    idUser: number | null
  }

  export type UserSumAggregateOutputType = {
    idUser: number | null
  }

  export type UserMinAggregateOutputType = {
    idUser: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    phoneNumber: string | null
    elementarySchool: string | null
    juniorHighSchool: string | null
    seniorHighSchool: string | null
    university: string | null
    gender: $Enums.Gender | null
    about: string | null
    birthdate: Date | null
    refreshToken: string | null
  }

  export type UserMaxAggregateOutputType = {
    idUser: number | null
    firstName: string | null
    lastName: string | null
    email: string | null
    password: string | null
    phoneNumber: string | null
    elementarySchool: string | null
    juniorHighSchool: string | null
    seniorHighSchool: string | null
    university: string | null
    gender: $Enums.Gender | null
    about: string | null
    birthdate: Date | null
    refreshToken: string | null
  }

  export type UserCountAggregateOutputType = {
    idUser: number
    firstName: number
    lastName: number
    email: number
    password: number
    phoneNumber: number
    elementarySchool: number
    juniorHighSchool: number
    seniorHighSchool: number
    university: number
    gender: number
    about: number
    birthdate: number
    refreshToken: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    idUser?: true
  }

  export type UserSumAggregateInputType = {
    idUser?: true
  }

  export type UserMinAggregateInputType = {
    idUser?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    phoneNumber?: true
    elementarySchool?: true
    juniorHighSchool?: true
    seniorHighSchool?: true
    university?: true
    gender?: true
    about?: true
    birthdate?: true
    refreshToken?: true
  }

  export type UserMaxAggregateInputType = {
    idUser?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    phoneNumber?: true
    elementarySchool?: true
    juniorHighSchool?: true
    seniorHighSchool?: true
    university?: true
    gender?: true
    about?: true
    birthdate?: true
    refreshToken?: true
  }

  export type UserCountAggregateInputType = {
    idUser?: true
    firstName?: true
    lastName?: true
    email?: true
    password?: true
    phoneNumber?: true
    elementarySchool?: true
    juniorHighSchool?: true
    seniorHighSchool?: true
    university?: true
    gender?: true
    about?: true
    birthdate?: true
    refreshToken?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    idUser: number
    firstName: string
    lastName: string
    email: string
    password: string
    phoneNumber: string
    elementarySchool: string
    juniorHighSchool: string
    seniorHighSchool: string
    university: string
    gender: $Enums.Gender
    about: string
    birthdate: Date
    refreshToken: string | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idUser?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    elementarySchool?: boolean
    juniorHighSchool?: boolean
    seniorHighSchool?: boolean
    university?: boolean
    gender?: boolean
    about?: boolean
    birthdate?: boolean
    refreshToken?: boolean
    userAcademicEvents?: boolean | User$userAcademicEventsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    idUser?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    password?: boolean
    phoneNumber?: boolean
    elementarySchool?: boolean
    juniorHighSchool?: boolean
    seniorHighSchool?: boolean
    university?: boolean
    gender?: boolean
    about?: boolean
    birthdate?: boolean
    refreshToken?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idUser" | "firstName" | "lastName" | "email" | "password" | "phoneNumber" | "elementarySchool" | "juniorHighSchool" | "seniorHighSchool" | "university" | "gender" | "about" | "birthdate" | "refreshToken", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    userAcademicEvents?: boolean | User$userAcademicEventsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      userAcademicEvents: Prisma.$UserJoinAcademicEventsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idUser: number
      firstName: string
      lastName: string
      email: string
      password: string
      phoneNumber: string
      elementarySchool: string
      juniorHighSchool: string
      seniorHighSchool: string
      university: string
      gender: $Enums.Gender
      about: string
      birthdate: Date
      refreshToken: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `idUser`
     * const userWithIdUserOnly = await prisma.user.findMany({ select: { idUser: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    userAcademicEvents<T extends User$userAcademicEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$userAcademicEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserJoinAcademicEventsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly idUser: FieldRef<"User", 'Int'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly phoneNumber: FieldRef<"User", 'String'>
    readonly elementarySchool: FieldRef<"User", 'String'>
    readonly juniorHighSchool: FieldRef<"User", 'String'>
    readonly seniorHighSchool: FieldRef<"User", 'String'>
    readonly university: FieldRef<"User", 'String'>
    readonly gender: FieldRef<"User", 'Gender'>
    readonly about: FieldRef<"User", 'String'>
    readonly birthdate: FieldRef<"User", 'DateTime'>
    readonly refreshToken: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.userAcademicEvents
   */
  export type User$userAcademicEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserJoinAcademicEvents
     */
    select?: UserJoinAcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserJoinAcademicEvents
     */
    omit?: UserJoinAcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserJoinAcademicEventsInclude<ExtArgs> | null
    where?: UserJoinAcademicEventsWhereInput
    orderBy?: UserJoinAcademicEventsOrderByWithRelationInput | UserJoinAcademicEventsOrderByWithRelationInput[]
    cursor?: UserJoinAcademicEventsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserJoinAcademicEventsScalarFieldEnum | UserJoinAcademicEventsScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model EventOrganizer
   */

  export type AggregateEventOrganizer = {
    _count: EventOrganizerCountAggregateOutputType | null
    _avg: EventOrganizerAvgAggregateOutputType | null
    _sum: EventOrganizerSumAggregateOutputType | null
    _min: EventOrganizerMinAggregateOutputType | null
    _max: EventOrganizerMaxAggregateOutputType | null
  }

  export type EventOrganizerAvgAggregateOutputType = {
    idOrganizer: number | null
  }

  export type EventOrganizerSumAggregateOutputType = {
    idOrganizer: number | null
  }

  export type EventOrganizerMinAggregateOutputType = {
    idOrganizer: number | null
    email: string | null
    password: string | null
    organizerName: string | null
    organizerInstitution: string | null
    organizerAddress: string | null
    phoneNumber: string | null
  }

  export type EventOrganizerMaxAggregateOutputType = {
    idOrganizer: number | null
    email: string | null
    password: string | null
    organizerName: string | null
    organizerInstitution: string | null
    organizerAddress: string | null
    phoneNumber: string | null
  }

  export type EventOrganizerCountAggregateOutputType = {
    idOrganizer: number
    email: number
    password: number
    organizerName: number
    organizerInstitution: number
    organizerAddress: number
    phoneNumber: number
    _all: number
  }


  export type EventOrganizerAvgAggregateInputType = {
    idOrganizer?: true
  }

  export type EventOrganizerSumAggregateInputType = {
    idOrganizer?: true
  }

  export type EventOrganizerMinAggregateInputType = {
    idOrganizer?: true
    email?: true
    password?: true
    organizerName?: true
    organizerInstitution?: true
    organizerAddress?: true
    phoneNumber?: true
  }

  export type EventOrganizerMaxAggregateInputType = {
    idOrganizer?: true
    email?: true
    password?: true
    organizerName?: true
    organizerInstitution?: true
    organizerAddress?: true
    phoneNumber?: true
  }

  export type EventOrganizerCountAggregateInputType = {
    idOrganizer?: true
    email?: true
    password?: true
    organizerName?: true
    organizerInstitution?: true
    organizerAddress?: true
    phoneNumber?: true
    _all?: true
  }

  export type EventOrganizerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventOrganizer to aggregate.
     */
    where?: EventOrganizerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizers to fetch.
     */
    orderBy?: EventOrganizerOrderByWithRelationInput | EventOrganizerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventOrganizerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EventOrganizers
    **/
    _count?: true | EventOrganizerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventOrganizerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventOrganizerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventOrganizerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventOrganizerMaxAggregateInputType
  }

  export type GetEventOrganizerAggregateType<T extends EventOrganizerAggregateArgs> = {
        [P in keyof T & keyof AggregateEventOrganizer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEventOrganizer[P]>
      : GetScalarType<T[P], AggregateEventOrganizer[P]>
  }




  export type EventOrganizerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventOrganizerWhereInput
    orderBy?: EventOrganizerOrderByWithAggregationInput | EventOrganizerOrderByWithAggregationInput[]
    by: EventOrganizerScalarFieldEnum[] | EventOrganizerScalarFieldEnum
    having?: EventOrganizerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventOrganizerCountAggregateInputType | true
    _avg?: EventOrganizerAvgAggregateInputType
    _sum?: EventOrganizerSumAggregateInputType
    _min?: EventOrganizerMinAggregateInputType
    _max?: EventOrganizerMaxAggregateInputType
  }

  export type EventOrganizerGroupByOutputType = {
    idOrganizer: number
    email: string
    password: string
    organizerName: string
    organizerInstitution: string
    organizerAddress: string
    phoneNumber: string
    _count: EventOrganizerCountAggregateOutputType | null
    _avg: EventOrganizerAvgAggregateOutputType | null
    _sum: EventOrganizerSumAggregateOutputType | null
    _min: EventOrganizerMinAggregateOutputType | null
    _max: EventOrganizerMaxAggregateOutputType | null
  }

  type GetEventOrganizerGroupByPayload<T extends EventOrganizerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventOrganizerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventOrganizerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventOrganizerGroupByOutputType[P]>
            : GetScalarType<T[P], EventOrganizerGroupByOutputType[P]>
        }
      >
    >


  export type EventOrganizerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idOrganizer?: boolean
    email?: boolean
    password?: boolean
    organizerName?: boolean
    organizerInstitution?: boolean
    organizerAddress?: boolean
    phoneNumber?: boolean
    events?: boolean | EventOrganizer$eventsArgs<ExtArgs>
    _count?: boolean | EventOrganizerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["eventOrganizer"]>



  export type EventOrganizerSelectScalar = {
    idOrganizer?: boolean
    email?: boolean
    password?: boolean
    organizerName?: boolean
    organizerInstitution?: boolean
    organizerAddress?: boolean
    phoneNumber?: boolean
  }

  export type EventOrganizerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idOrganizer" | "email" | "password" | "organizerName" | "organizerInstitution" | "organizerAddress" | "phoneNumber", ExtArgs["result"]["eventOrganizer"]>
  export type EventOrganizerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    events?: boolean | EventOrganizer$eventsArgs<ExtArgs>
    _count?: boolean | EventOrganizerCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $EventOrganizerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "EventOrganizer"
    objects: {
      events: Prisma.$AcademicEventsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idOrganizer: number
      email: string
      password: string
      organizerName: string
      organizerInstitution: string
      organizerAddress: string
      phoneNumber: string
    }, ExtArgs["result"]["eventOrganizer"]>
    composites: {}
  }

  type EventOrganizerGetPayload<S extends boolean | null | undefined | EventOrganizerDefaultArgs> = $Result.GetResult<Prisma.$EventOrganizerPayload, S>

  type EventOrganizerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EventOrganizerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EventOrganizerCountAggregateInputType | true
    }

  export interface EventOrganizerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['EventOrganizer'], meta: { name: 'EventOrganizer' } }
    /**
     * Find zero or one EventOrganizer that matches the filter.
     * @param {EventOrganizerFindUniqueArgs} args - Arguments to find a EventOrganizer
     * @example
     * // Get one EventOrganizer
     * const eventOrganizer = await prisma.eventOrganizer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventOrganizerFindUniqueArgs>(args: SelectSubset<T, EventOrganizerFindUniqueArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one EventOrganizer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EventOrganizerFindUniqueOrThrowArgs} args - Arguments to find a EventOrganizer
     * @example
     * // Get one EventOrganizer
     * const eventOrganizer = await prisma.eventOrganizer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventOrganizerFindUniqueOrThrowArgs>(args: SelectSubset<T, EventOrganizerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first EventOrganizer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerFindFirstArgs} args - Arguments to find a EventOrganizer
     * @example
     * // Get one EventOrganizer
     * const eventOrganizer = await prisma.eventOrganizer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventOrganizerFindFirstArgs>(args?: SelectSubset<T, EventOrganizerFindFirstArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first EventOrganizer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerFindFirstOrThrowArgs} args - Arguments to find a EventOrganizer
     * @example
     * // Get one EventOrganizer
     * const eventOrganizer = await prisma.eventOrganizer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventOrganizerFindFirstOrThrowArgs>(args?: SelectSubset<T, EventOrganizerFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more EventOrganizers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EventOrganizers
     * const eventOrganizers = await prisma.eventOrganizer.findMany()
     * 
     * // Get first 10 EventOrganizers
     * const eventOrganizers = await prisma.eventOrganizer.findMany({ take: 10 })
     * 
     * // Only select the `idOrganizer`
     * const eventOrganizerWithIdOrganizerOnly = await prisma.eventOrganizer.findMany({ select: { idOrganizer: true } })
     * 
     */
    findMany<T extends EventOrganizerFindManyArgs>(args?: SelectSubset<T, EventOrganizerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a EventOrganizer.
     * @param {EventOrganizerCreateArgs} args - Arguments to create a EventOrganizer.
     * @example
     * // Create one EventOrganizer
     * const EventOrganizer = await prisma.eventOrganizer.create({
     *   data: {
     *     // ... data to create a EventOrganizer
     *   }
     * })
     * 
     */
    create<T extends EventOrganizerCreateArgs>(args: SelectSubset<T, EventOrganizerCreateArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many EventOrganizers.
     * @param {EventOrganizerCreateManyArgs} args - Arguments to create many EventOrganizers.
     * @example
     * // Create many EventOrganizers
     * const eventOrganizer = await prisma.eventOrganizer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventOrganizerCreateManyArgs>(args?: SelectSubset<T, EventOrganizerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EventOrganizer.
     * @param {EventOrganizerDeleteArgs} args - Arguments to delete one EventOrganizer.
     * @example
     * // Delete one EventOrganizer
     * const EventOrganizer = await prisma.eventOrganizer.delete({
     *   where: {
     *     // ... filter to delete one EventOrganizer
     *   }
     * })
     * 
     */
    delete<T extends EventOrganizerDeleteArgs>(args: SelectSubset<T, EventOrganizerDeleteArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one EventOrganizer.
     * @param {EventOrganizerUpdateArgs} args - Arguments to update one EventOrganizer.
     * @example
     * // Update one EventOrganizer
     * const eventOrganizer = await prisma.eventOrganizer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventOrganizerUpdateArgs>(args: SelectSubset<T, EventOrganizerUpdateArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more EventOrganizers.
     * @param {EventOrganizerDeleteManyArgs} args - Arguments to filter EventOrganizers to delete.
     * @example
     * // Delete a few EventOrganizers
     * const { count } = await prisma.eventOrganizer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventOrganizerDeleteManyArgs>(args?: SelectSubset<T, EventOrganizerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EventOrganizers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EventOrganizers
     * const eventOrganizer = await prisma.eventOrganizer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventOrganizerUpdateManyArgs>(args: SelectSubset<T, EventOrganizerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EventOrganizer.
     * @param {EventOrganizerUpsertArgs} args - Arguments to update or create a EventOrganizer.
     * @example
     * // Update or create a EventOrganizer
     * const eventOrganizer = await prisma.eventOrganizer.upsert({
     *   create: {
     *     // ... data to create a EventOrganizer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EventOrganizer we want to update
     *   }
     * })
     */
    upsert<T extends EventOrganizerUpsertArgs>(args: SelectSubset<T, EventOrganizerUpsertArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of EventOrganizers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerCountArgs} args - Arguments to filter EventOrganizers to count.
     * @example
     * // Count the number of EventOrganizers
     * const count = await prisma.eventOrganizer.count({
     *   where: {
     *     // ... the filter for the EventOrganizers we want to count
     *   }
     * })
    **/
    count<T extends EventOrganizerCountArgs>(
      args?: Subset<T, EventOrganizerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventOrganizerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EventOrganizer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventOrganizerAggregateArgs>(args: Subset<T, EventOrganizerAggregateArgs>): Prisma.PrismaPromise<GetEventOrganizerAggregateType<T>>

    /**
     * Group by EventOrganizer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventOrganizerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventOrganizerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventOrganizerGroupByArgs['orderBy'] }
        : { orderBy?: EventOrganizerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventOrganizerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventOrganizerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the EventOrganizer model
   */
  readonly fields: EventOrganizerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for EventOrganizer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventOrganizerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    events<T extends EventOrganizer$eventsArgs<ExtArgs> = {}>(args?: Subset<T, EventOrganizer$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicEventsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the EventOrganizer model
   */ 
  interface EventOrganizerFieldRefs {
    readonly idOrganizer: FieldRef<"EventOrganizer", 'Int'>
    readonly email: FieldRef<"EventOrganizer", 'String'>
    readonly password: FieldRef<"EventOrganizer", 'String'>
    readonly organizerName: FieldRef<"EventOrganizer", 'String'>
    readonly organizerInstitution: FieldRef<"EventOrganizer", 'String'>
    readonly organizerAddress: FieldRef<"EventOrganizer", 'String'>
    readonly phoneNumber: FieldRef<"EventOrganizer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * EventOrganizer findUnique
   */
  export type EventOrganizerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizer
     */
    omit?: EventOrganizerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizer to fetch.
     */
    where: EventOrganizerWhereUniqueInput
  }

  /**
   * EventOrganizer findUniqueOrThrow
   */
  export type EventOrganizerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizer
     */
    omit?: EventOrganizerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizer to fetch.
     */
    where: EventOrganizerWhereUniqueInput
  }

  /**
   * EventOrganizer findFirst
   */
  export type EventOrganizerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizer
     */
    omit?: EventOrganizerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizer to fetch.
     */
    where?: EventOrganizerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizers to fetch.
     */
    orderBy?: EventOrganizerOrderByWithRelationInput | EventOrganizerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventOrganizers.
     */
    cursor?: EventOrganizerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventOrganizers.
     */
    distinct?: EventOrganizerScalarFieldEnum | EventOrganizerScalarFieldEnum[]
  }

  /**
   * EventOrganizer findFirstOrThrow
   */
  export type EventOrganizerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizer
     */
    omit?: EventOrganizerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizer to fetch.
     */
    where?: EventOrganizerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizers to fetch.
     */
    orderBy?: EventOrganizerOrderByWithRelationInput | EventOrganizerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EventOrganizers.
     */
    cursor?: EventOrganizerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EventOrganizers.
     */
    distinct?: EventOrganizerScalarFieldEnum | EventOrganizerScalarFieldEnum[]
  }

  /**
   * EventOrganizer findMany
   */
  export type EventOrganizerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizer
     */
    omit?: EventOrganizerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * Filter, which EventOrganizers to fetch.
     */
    where?: EventOrganizerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EventOrganizers to fetch.
     */
    orderBy?: EventOrganizerOrderByWithRelationInput | EventOrganizerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EventOrganizers.
     */
    cursor?: EventOrganizerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EventOrganizers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EventOrganizers.
     */
    skip?: number
    distinct?: EventOrganizerScalarFieldEnum | EventOrganizerScalarFieldEnum[]
  }

  /**
   * EventOrganizer create
   */
  export type EventOrganizerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizer
     */
    omit?: EventOrganizerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * The data needed to create a EventOrganizer.
     */
    data: XOR<EventOrganizerCreateInput, EventOrganizerUncheckedCreateInput>
  }

  /**
   * EventOrganizer createMany
   */
  export type EventOrganizerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many EventOrganizers.
     */
    data: EventOrganizerCreateManyInput | EventOrganizerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * EventOrganizer update
   */
  export type EventOrganizerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizer
     */
    omit?: EventOrganizerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * The data needed to update a EventOrganizer.
     */
    data: XOR<EventOrganizerUpdateInput, EventOrganizerUncheckedUpdateInput>
    /**
     * Choose, which EventOrganizer to update.
     */
    where: EventOrganizerWhereUniqueInput
  }

  /**
   * EventOrganizer updateMany
   */
  export type EventOrganizerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update EventOrganizers.
     */
    data: XOR<EventOrganizerUpdateManyMutationInput, EventOrganizerUncheckedUpdateManyInput>
    /**
     * Filter which EventOrganizers to update
     */
    where?: EventOrganizerWhereInput
  }

  /**
   * EventOrganizer upsert
   */
  export type EventOrganizerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizer
     */
    omit?: EventOrganizerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * The filter to search for the EventOrganizer to update in case it exists.
     */
    where: EventOrganizerWhereUniqueInput
    /**
     * In case the EventOrganizer found by the `where` argument doesn't exist, create a new EventOrganizer with this data.
     */
    create: XOR<EventOrganizerCreateInput, EventOrganizerUncheckedCreateInput>
    /**
     * In case the EventOrganizer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventOrganizerUpdateInput, EventOrganizerUncheckedUpdateInput>
  }

  /**
   * EventOrganizer delete
   */
  export type EventOrganizerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizer
     */
    omit?: EventOrganizerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
    /**
     * Filter which EventOrganizer to delete.
     */
    where: EventOrganizerWhereUniqueInput
  }

  /**
   * EventOrganizer deleteMany
   */
  export type EventOrganizerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which EventOrganizers to delete
     */
    where?: EventOrganizerWhereInput
  }

  /**
   * EventOrganizer.events
   */
  export type EventOrganizer$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEvents
     */
    select?: AcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicEvents
     */
    omit?: AcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicEventsInclude<ExtArgs> | null
    where?: AcademicEventsWhereInput
    orderBy?: AcademicEventsOrderByWithRelationInput | AcademicEventsOrderByWithRelationInput[]
    cursor?: AcademicEventsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AcademicEventsScalarFieldEnum | AcademicEventsScalarFieldEnum[]
  }

  /**
   * EventOrganizer without action
   */
  export type EventOrganizerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventOrganizer
     */
    select?: EventOrganizerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the EventOrganizer
     */
    omit?: EventOrganizerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventOrganizerInclude<ExtArgs> | null
  }


  /**
   * Model AcademicEvents
   */

  export type AggregateAcademicEvents = {
    _count: AcademicEventsCountAggregateOutputType | null
    _avg: AcademicEventsAvgAggregateOutputType | null
    _sum: AcademicEventsSumAggregateOutputType | null
    _min: AcademicEventsMinAggregateOutputType | null
    _max: AcademicEventsMaxAggregateOutputType | null
  }

  export type AcademicEventsAvgAggregateOutputType = {
    idAcademicEvents: number | null
    idOrganizer: number | null
    registrationFee: number | null
    capacityTotal: number | null
    capacityTersisa: number | null
  }

  export type AcademicEventsSumAggregateOutputType = {
    idAcademicEvents: number | null
    idOrganizer: number | null
    registrationFee: number | null
    capacityTotal: number | null
    capacityTersisa: number | null
  }

  export type AcademicEventsMinAggregateOutputType = {
    idAcademicEvents: number | null
    idOrganizer: number | null
    eventsName: string | null
    eventsLoc: string | null
    eventsJenjang: $Enums.EventJenjang | null
    eventsHeld: $Enums.EventHeld | null
    eventCategory: string | null
    eventsDate: Date | null
    registrationDate: Date | null
    eventsTheme: string | null
    registrationFee: number | null
    capacityTotal: number | null
    capacityTersisa: number | null
    capacityStatus: $Enums.CapacityStatus | null
    deskripsiEvent: string | null
  }

  export type AcademicEventsMaxAggregateOutputType = {
    idAcademicEvents: number | null
    idOrganizer: number | null
    eventsName: string | null
    eventsLoc: string | null
    eventsJenjang: $Enums.EventJenjang | null
    eventsHeld: $Enums.EventHeld | null
    eventCategory: string | null
    eventsDate: Date | null
    registrationDate: Date | null
    eventsTheme: string | null
    registrationFee: number | null
    capacityTotal: number | null
    capacityTersisa: number | null
    capacityStatus: $Enums.CapacityStatus | null
    deskripsiEvent: string | null
  }

  export type AcademicEventsCountAggregateOutputType = {
    idAcademicEvents: number
    idOrganizer: number
    eventsName: number
    eventsLoc: number
    eventsJenjang: number
    eventsHeld: number
    eventCategory: number
    eventsDate: number
    registrationDate: number
    eventsTheme: number
    registrationFee: number
    capacityTotal: number
    capacityTersisa: number
    capacityStatus: number
    deskripsiEvent: number
    _all: number
  }


  export type AcademicEventsAvgAggregateInputType = {
    idAcademicEvents?: true
    idOrganizer?: true
    registrationFee?: true
    capacityTotal?: true
    capacityTersisa?: true
  }

  export type AcademicEventsSumAggregateInputType = {
    idAcademicEvents?: true
    idOrganizer?: true
    registrationFee?: true
    capacityTotal?: true
    capacityTersisa?: true
  }

  export type AcademicEventsMinAggregateInputType = {
    idAcademicEvents?: true
    idOrganizer?: true
    eventsName?: true
    eventsLoc?: true
    eventsJenjang?: true
    eventsHeld?: true
    eventCategory?: true
    eventsDate?: true
    registrationDate?: true
    eventsTheme?: true
    registrationFee?: true
    capacityTotal?: true
    capacityTersisa?: true
    capacityStatus?: true
    deskripsiEvent?: true
  }

  export type AcademicEventsMaxAggregateInputType = {
    idAcademicEvents?: true
    idOrganizer?: true
    eventsName?: true
    eventsLoc?: true
    eventsJenjang?: true
    eventsHeld?: true
    eventCategory?: true
    eventsDate?: true
    registrationDate?: true
    eventsTheme?: true
    registrationFee?: true
    capacityTotal?: true
    capacityTersisa?: true
    capacityStatus?: true
    deskripsiEvent?: true
  }

  export type AcademicEventsCountAggregateInputType = {
    idAcademicEvents?: true
    idOrganizer?: true
    eventsName?: true
    eventsLoc?: true
    eventsJenjang?: true
    eventsHeld?: true
    eventCategory?: true
    eventsDate?: true
    registrationDate?: true
    eventsTheme?: true
    registrationFee?: true
    capacityTotal?: true
    capacityTersisa?: true
    capacityStatus?: true
    deskripsiEvent?: true
    _all?: true
  }

  export type AcademicEventsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AcademicEvents to aggregate.
     */
    where?: AcademicEventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicEvents to fetch.
     */
    orderBy?: AcademicEventsOrderByWithRelationInput | AcademicEventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AcademicEventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AcademicEvents
    **/
    _count?: true | AcademicEventsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AcademicEventsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AcademicEventsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AcademicEventsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AcademicEventsMaxAggregateInputType
  }

  export type GetAcademicEventsAggregateType<T extends AcademicEventsAggregateArgs> = {
        [P in keyof T & keyof AggregateAcademicEvents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAcademicEvents[P]>
      : GetScalarType<T[P], AggregateAcademicEvents[P]>
  }




  export type AcademicEventsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AcademicEventsWhereInput
    orderBy?: AcademicEventsOrderByWithAggregationInput | AcademicEventsOrderByWithAggregationInput[]
    by: AcademicEventsScalarFieldEnum[] | AcademicEventsScalarFieldEnum
    having?: AcademicEventsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AcademicEventsCountAggregateInputType | true
    _avg?: AcademicEventsAvgAggregateInputType
    _sum?: AcademicEventsSumAggregateInputType
    _min?: AcademicEventsMinAggregateInputType
    _max?: AcademicEventsMaxAggregateInputType
  }

  export type AcademicEventsGroupByOutputType = {
    idAcademicEvents: number
    idOrganizer: number
    eventsName: string
    eventsLoc: string
    eventsJenjang: $Enums.EventJenjang
    eventsHeld: $Enums.EventHeld
    eventCategory: string
    eventsDate: Date
    registrationDate: Date
    eventsTheme: string
    registrationFee: number
    capacityTotal: number | null
    capacityTersisa: number | null
    capacityStatus: $Enums.CapacityStatus
    deskripsiEvent: string
    _count: AcademicEventsCountAggregateOutputType | null
    _avg: AcademicEventsAvgAggregateOutputType | null
    _sum: AcademicEventsSumAggregateOutputType | null
    _min: AcademicEventsMinAggregateOutputType | null
    _max: AcademicEventsMaxAggregateOutputType | null
  }

  type GetAcademicEventsGroupByPayload<T extends AcademicEventsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AcademicEventsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AcademicEventsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AcademicEventsGroupByOutputType[P]>
            : GetScalarType<T[P], AcademicEventsGroupByOutputType[P]>
        }
      >
    >


  export type AcademicEventsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idAcademicEvents?: boolean
    idOrganizer?: boolean
    eventsName?: boolean
    eventsLoc?: boolean
    eventsJenjang?: boolean
    eventsHeld?: boolean
    eventCategory?: boolean
    eventsDate?: boolean
    registrationDate?: boolean
    eventsTheme?: boolean
    registrationFee?: boolean
    capacityTotal?: boolean
    capacityTersisa?: boolean
    capacityStatus?: boolean
    deskripsiEvent?: boolean
    eventOrganizer?: boolean | EventOrganizerDefaultArgs<ExtArgs>
    userJoins?: boolean | AcademicEvents$userJoinsArgs<ExtArgs>
    _count?: boolean | AcademicEventsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["academicEvents"]>



  export type AcademicEventsSelectScalar = {
    idAcademicEvents?: boolean
    idOrganizer?: boolean
    eventsName?: boolean
    eventsLoc?: boolean
    eventsJenjang?: boolean
    eventsHeld?: boolean
    eventCategory?: boolean
    eventsDate?: boolean
    registrationDate?: boolean
    eventsTheme?: boolean
    registrationFee?: boolean
    capacityTotal?: boolean
    capacityTersisa?: boolean
    capacityStatus?: boolean
    deskripsiEvent?: boolean
  }

  export type AcademicEventsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idAcademicEvents" | "idOrganizer" | "eventsName" | "eventsLoc" | "eventsJenjang" | "eventsHeld" | "eventCategory" | "eventsDate" | "registrationDate" | "eventsTheme" | "registrationFee" | "capacityTotal" | "capacityTersisa" | "capacityStatus" | "deskripsiEvent", ExtArgs["result"]["academicEvents"]>
  export type AcademicEventsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    eventOrganizer?: boolean | EventOrganizerDefaultArgs<ExtArgs>
    userJoins?: boolean | AcademicEvents$userJoinsArgs<ExtArgs>
    _count?: boolean | AcademicEventsCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AcademicEventsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AcademicEvents"
    objects: {
      eventOrganizer: Prisma.$EventOrganizerPayload<ExtArgs>
      userJoins: Prisma.$UserJoinAcademicEventsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idAcademicEvents: number
      idOrganizer: number
      eventsName: string
      eventsLoc: string
      eventsJenjang: $Enums.EventJenjang
      eventsHeld: $Enums.EventHeld
      eventCategory: string
      eventsDate: Date
      registrationDate: Date
      eventsTheme: string
      registrationFee: number
      capacityTotal: number | null
      capacityTersisa: number | null
      capacityStatus: $Enums.CapacityStatus
      deskripsiEvent: string
    }, ExtArgs["result"]["academicEvents"]>
    composites: {}
  }

  type AcademicEventsGetPayload<S extends boolean | null | undefined | AcademicEventsDefaultArgs> = $Result.GetResult<Prisma.$AcademicEventsPayload, S>

  type AcademicEventsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AcademicEventsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AcademicEventsCountAggregateInputType | true
    }

  export interface AcademicEventsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AcademicEvents'], meta: { name: 'AcademicEvents' } }
    /**
     * Find zero or one AcademicEvents that matches the filter.
     * @param {AcademicEventsFindUniqueArgs} args - Arguments to find a AcademicEvents
     * @example
     * // Get one AcademicEvents
     * const academicEvents = await prisma.academicEvents.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AcademicEventsFindUniqueArgs>(args: SelectSubset<T, AcademicEventsFindUniqueArgs<ExtArgs>>): Prisma__AcademicEventsClient<$Result.GetResult<Prisma.$AcademicEventsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one AcademicEvents that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AcademicEventsFindUniqueOrThrowArgs} args - Arguments to find a AcademicEvents
     * @example
     * // Get one AcademicEvents
     * const academicEvents = await prisma.academicEvents.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AcademicEventsFindUniqueOrThrowArgs>(args: SelectSubset<T, AcademicEventsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AcademicEventsClient<$Result.GetResult<Prisma.$AcademicEventsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first AcademicEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicEventsFindFirstArgs} args - Arguments to find a AcademicEvents
     * @example
     * // Get one AcademicEvents
     * const academicEvents = await prisma.academicEvents.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AcademicEventsFindFirstArgs>(args?: SelectSubset<T, AcademicEventsFindFirstArgs<ExtArgs>>): Prisma__AcademicEventsClient<$Result.GetResult<Prisma.$AcademicEventsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first AcademicEvents that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicEventsFindFirstOrThrowArgs} args - Arguments to find a AcademicEvents
     * @example
     * // Get one AcademicEvents
     * const academicEvents = await prisma.academicEvents.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AcademicEventsFindFirstOrThrowArgs>(args?: SelectSubset<T, AcademicEventsFindFirstOrThrowArgs<ExtArgs>>): Prisma__AcademicEventsClient<$Result.GetResult<Prisma.$AcademicEventsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more AcademicEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicEventsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AcademicEvents
     * const academicEvents = await prisma.academicEvents.findMany()
     * 
     * // Get first 10 AcademicEvents
     * const academicEvents = await prisma.academicEvents.findMany({ take: 10 })
     * 
     * // Only select the `idAcademicEvents`
     * const academicEventsWithIdAcademicEventsOnly = await prisma.academicEvents.findMany({ select: { idAcademicEvents: true } })
     * 
     */
    findMany<T extends AcademicEventsFindManyArgs>(args?: SelectSubset<T, AcademicEventsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AcademicEventsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a AcademicEvents.
     * @param {AcademicEventsCreateArgs} args - Arguments to create a AcademicEvents.
     * @example
     * // Create one AcademicEvents
     * const AcademicEvents = await prisma.academicEvents.create({
     *   data: {
     *     // ... data to create a AcademicEvents
     *   }
     * })
     * 
     */
    create<T extends AcademicEventsCreateArgs>(args: SelectSubset<T, AcademicEventsCreateArgs<ExtArgs>>): Prisma__AcademicEventsClient<$Result.GetResult<Prisma.$AcademicEventsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many AcademicEvents.
     * @param {AcademicEventsCreateManyArgs} args - Arguments to create many AcademicEvents.
     * @example
     * // Create many AcademicEvents
     * const academicEvents = await prisma.academicEvents.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AcademicEventsCreateManyArgs>(args?: SelectSubset<T, AcademicEventsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AcademicEvents.
     * @param {AcademicEventsDeleteArgs} args - Arguments to delete one AcademicEvents.
     * @example
     * // Delete one AcademicEvents
     * const AcademicEvents = await prisma.academicEvents.delete({
     *   where: {
     *     // ... filter to delete one AcademicEvents
     *   }
     * })
     * 
     */
    delete<T extends AcademicEventsDeleteArgs>(args: SelectSubset<T, AcademicEventsDeleteArgs<ExtArgs>>): Prisma__AcademicEventsClient<$Result.GetResult<Prisma.$AcademicEventsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one AcademicEvents.
     * @param {AcademicEventsUpdateArgs} args - Arguments to update one AcademicEvents.
     * @example
     * // Update one AcademicEvents
     * const academicEvents = await prisma.academicEvents.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AcademicEventsUpdateArgs>(args: SelectSubset<T, AcademicEventsUpdateArgs<ExtArgs>>): Prisma__AcademicEventsClient<$Result.GetResult<Prisma.$AcademicEventsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more AcademicEvents.
     * @param {AcademicEventsDeleteManyArgs} args - Arguments to filter AcademicEvents to delete.
     * @example
     * // Delete a few AcademicEvents
     * const { count } = await prisma.academicEvents.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AcademicEventsDeleteManyArgs>(args?: SelectSubset<T, AcademicEventsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AcademicEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicEventsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AcademicEvents
     * const academicEvents = await prisma.academicEvents.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AcademicEventsUpdateManyArgs>(args: SelectSubset<T, AcademicEventsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AcademicEvents.
     * @param {AcademicEventsUpsertArgs} args - Arguments to update or create a AcademicEvents.
     * @example
     * // Update or create a AcademicEvents
     * const academicEvents = await prisma.academicEvents.upsert({
     *   create: {
     *     // ... data to create a AcademicEvents
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AcademicEvents we want to update
     *   }
     * })
     */
    upsert<T extends AcademicEventsUpsertArgs>(args: SelectSubset<T, AcademicEventsUpsertArgs<ExtArgs>>): Prisma__AcademicEventsClient<$Result.GetResult<Prisma.$AcademicEventsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of AcademicEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicEventsCountArgs} args - Arguments to filter AcademicEvents to count.
     * @example
     * // Count the number of AcademicEvents
     * const count = await prisma.academicEvents.count({
     *   where: {
     *     // ... the filter for the AcademicEvents we want to count
     *   }
     * })
    **/
    count<T extends AcademicEventsCountArgs>(
      args?: Subset<T, AcademicEventsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AcademicEventsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AcademicEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicEventsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AcademicEventsAggregateArgs>(args: Subset<T, AcademicEventsAggregateArgs>): Prisma.PrismaPromise<GetAcademicEventsAggregateType<T>>

    /**
     * Group by AcademicEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AcademicEventsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AcademicEventsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AcademicEventsGroupByArgs['orderBy'] }
        : { orderBy?: AcademicEventsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AcademicEventsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAcademicEventsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AcademicEvents model
   */
  readonly fields: AcademicEventsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AcademicEvents.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AcademicEventsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    eventOrganizer<T extends EventOrganizerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventOrganizerDefaultArgs<ExtArgs>>): Prisma__EventOrganizerClient<$Result.GetResult<Prisma.$EventOrganizerPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    userJoins<T extends AcademicEvents$userJoinsArgs<ExtArgs> = {}>(args?: Subset<T, AcademicEvents$userJoinsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserJoinAcademicEventsPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AcademicEvents model
   */ 
  interface AcademicEventsFieldRefs {
    readonly idAcademicEvents: FieldRef<"AcademicEvents", 'Int'>
    readonly idOrganizer: FieldRef<"AcademicEvents", 'Int'>
    readonly eventsName: FieldRef<"AcademicEvents", 'String'>
    readonly eventsLoc: FieldRef<"AcademicEvents", 'String'>
    readonly eventsJenjang: FieldRef<"AcademicEvents", 'EventJenjang'>
    readonly eventsHeld: FieldRef<"AcademicEvents", 'EventHeld'>
    readonly eventCategory: FieldRef<"AcademicEvents", 'String'>
    readonly eventsDate: FieldRef<"AcademicEvents", 'DateTime'>
    readonly registrationDate: FieldRef<"AcademicEvents", 'DateTime'>
    readonly eventsTheme: FieldRef<"AcademicEvents", 'String'>
    readonly registrationFee: FieldRef<"AcademicEvents", 'Float'>
    readonly capacityTotal: FieldRef<"AcademicEvents", 'Int'>
    readonly capacityTersisa: FieldRef<"AcademicEvents", 'Int'>
    readonly capacityStatus: FieldRef<"AcademicEvents", 'CapacityStatus'>
    readonly deskripsiEvent: FieldRef<"AcademicEvents", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AcademicEvents findUnique
   */
  export type AcademicEventsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEvents
     */
    select?: AcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicEvents
     */
    omit?: AcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicEventsInclude<ExtArgs> | null
    /**
     * Filter, which AcademicEvents to fetch.
     */
    where: AcademicEventsWhereUniqueInput
  }

  /**
   * AcademicEvents findUniqueOrThrow
   */
  export type AcademicEventsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEvents
     */
    select?: AcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicEvents
     */
    omit?: AcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicEventsInclude<ExtArgs> | null
    /**
     * Filter, which AcademicEvents to fetch.
     */
    where: AcademicEventsWhereUniqueInput
  }

  /**
   * AcademicEvents findFirst
   */
  export type AcademicEventsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEvents
     */
    select?: AcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicEvents
     */
    omit?: AcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicEventsInclude<ExtArgs> | null
    /**
     * Filter, which AcademicEvents to fetch.
     */
    where?: AcademicEventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicEvents to fetch.
     */
    orderBy?: AcademicEventsOrderByWithRelationInput | AcademicEventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AcademicEvents.
     */
    cursor?: AcademicEventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AcademicEvents.
     */
    distinct?: AcademicEventsScalarFieldEnum | AcademicEventsScalarFieldEnum[]
  }

  /**
   * AcademicEvents findFirstOrThrow
   */
  export type AcademicEventsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEvents
     */
    select?: AcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicEvents
     */
    omit?: AcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicEventsInclude<ExtArgs> | null
    /**
     * Filter, which AcademicEvents to fetch.
     */
    where?: AcademicEventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicEvents to fetch.
     */
    orderBy?: AcademicEventsOrderByWithRelationInput | AcademicEventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AcademicEvents.
     */
    cursor?: AcademicEventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AcademicEvents.
     */
    distinct?: AcademicEventsScalarFieldEnum | AcademicEventsScalarFieldEnum[]
  }

  /**
   * AcademicEvents findMany
   */
  export type AcademicEventsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEvents
     */
    select?: AcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicEvents
     */
    omit?: AcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicEventsInclude<ExtArgs> | null
    /**
     * Filter, which AcademicEvents to fetch.
     */
    where?: AcademicEventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AcademicEvents to fetch.
     */
    orderBy?: AcademicEventsOrderByWithRelationInput | AcademicEventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AcademicEvents.
     */
    cursor?: AcademicEventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AcademicEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AcademicEvents.
     */
    skip?: number
    distinct?: AcademicEventsScalarFieldEnum | AcademicEventsScalarFieldEnum[]
  }

  /**
   * AcademicEvents create
   */
  export type AcademicEventsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEvents
     */
    select?: AcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicEvents
     */
    omit?: AcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicEventsInclude<ExtArgs> | null
    /**
     * The data needed to create a AcademicEvents.
     */
    data: XOR<AcademicEventsCreateInput, AcademicEventsUncheckedCreateInput>
  }

  /**
   * AcademicEvents createMany
   */
  export type AcademicEventsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AcademicEvents.
     */
    data: AcademicEventsCreateManyInput | AcademicEventsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AcademicEvents update
   */
  export type AcademicEventsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEvents
     */
    select?: AcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicEvents
     */
    omit?: AcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicEventsInclude<ExtArgs> | null
    /**
     * The data needed to update a AcademicEvents.
     */
    data: XOR<AcademicEventsUpdateInput, AcademicEventsUncheckedUpdateInput>
    /**
     * Choose, which AcademicEvents to update.
     */
    where: AcademicEventsWhereUniqueInput
  }

  /**
   * AcademicEvents updateMany
   */
  export type AcademicEventsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AcademicEvents.
     */
    data: XOR<AcademicEventsUpdateManyMutationInput, AcademicEventsUncheckedUpdateManyInput>
    /**
     * Filter which AcademicEvents to update
     */
    where?: AcademicEventsWhereInput
  }

  /**
   * AcademicEvents upsert
   */
  export type AcademicEventsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEvents
     */
    select?: AcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicEvents
     */
    omit?: AcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicEventsInclude<ExtArgs> | null
    /**
     * The filter to search for the AcademicEvents to update in case it exists.
     */
    where: AcademicEventsWhereUniqueInput
    /**
     * In case the AcademicEvents found by the `where` argument doesn't exist, create a new AcademicEvents with this data.
     */
    create: XOR<AcademicEventsCreateInput, AcademicEventsUncheckedCreateInput>
    /**
     * In case the AcademicEvents was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AcademicEventsUpdateInput, AcademicEventsUncheckedUpdateInput>
  }

  /**
   * AcademicEvents delete
   */
  export type AcademicEventsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEvents
     */
    select?: AcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicEvents
     */
    omit?: AcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicEventsInclude<ExtArgs> | null
    /**
     * Filter which AcademicEvents to delete.
     */
    where: AcademicEventsWhereUniqueInput
  }

  /**
   * AcademicEvents deleteMany
   */
  export type AcademicEventsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AcademicEvents to delete
     */
    where?: AcademicEventsWhereInput
  }

  /**
   * AcademicEvents.userJoins
   */
  export type AcademicEvents$userJoinsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserJoinAcademicEvents
     */
    select?: UserJoinAcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserJoinAcademicEvents
     */
    omit?: UserJoinAcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserJoinAcademicEventsInclude<ExtArgs> | null
    where?: UserJoinAcademicEventsWhereInput
    orderBy?: UserJoinAcademicEventsOrderByWithRelationInput | UserJoinAcademicEventsOrderByWithRelationInput[]
    cursor?: UserJoinAcademicEventsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserJoinAcademicEventsScalarFieldEnum | UserJoinAcademicEventsScalarFieldEnum[]
  }

  /**
   * AcademicEvents without action
   */
  export type AcademicEventsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AcademicEvents
     */
    select?: AcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the AcademicEvents
     */
    omit?: AcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AcademicEventsInclude<ExtArgs> | null
  }


  /**
   * Model UserJoinAcademicEvents
   */

  export type AggregateUserJoinAcademicEvents = {
    _count: UserJoinAcademicEventsCountAggregateOutputType | null
    _avg: UserJoinAcademicEventsAvgAggregateOutputType | null
    _sum: UserJoinAcademicEventsSumAggregateOutputType | null
    _min: UserJoinAcademicEventsMinAggregateOutputType | null
    _max: UserJoinAcademicEventsMaxAggregateOutputType | null
  }

  export type UserJoinAcademicEventsAvgAggregateOutputType = {
    idUserJoinAcademicEvents: number | null
    idUser: number | null
    idAcademicEvents: number | null
  }

  export type UserJoinAcademicEventsSumAggregateOutputType = {
    idUserJoinAcademicEvents: number | null
    idUser: number | null
    idAcademicEvents: number | null
  }

  export type UserJoinAcademicEventsMinAggregateOutputType = {
    idUserJoinAcademicEvents: number | null
    idUser: number | null
    idAcademicEvents: number | null
  }

  export type UserJoinAcademicEventsMaxAggregateOutputType = {
    idUserJoinAcademicEvents: number | null
    idUser: number | null
    idAcademicEvents: number | null
  }

  export type UserJoinAcademicEventsCountAggregateOutputType = {
    idUserJoinAcademicEvents: number
    idUser: number
    idAcademicEvents: number
    _all: number
  }


  export type UserJoinAcademicEventsAvgAggregateInputType = {
    idUserJoinAcademicEvents?: true
    idUser?: true
    idAcademicEvents?: true
  }

  export type UserJoinAcademicEventsSumAggregateInputType = {
    idUserJoinAcademicEvents?: true
    idUser?: true
    idAcademicEvents?: true
  }

  export type UserJoinAcademicEventsMinAggregateInputType = {
    idUserJoinAcademicEvents?: true
    idUser?: true
    idAcademicEvents?: true
  }

  export type UserJoinAcademicEventsMaxAggregateInputType = {
    idUserJoinAcademicEvents?: true
    idUser?: true
    idAcademicEvents?: true
  }

  export type UserJoinAcademicEventsCountAggregateInputType = {
    idUserJoinAcademicEvents?: true
    idUser?: true
    idAcademicEvents?: true
    _all?: true
  }

  export type UserJoinAcademicEventsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserJoinAcademicEvents to aggregate.
     */
    where?: UserJoinAcademicEventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserJoinAcademicEvents to fetch.
     */
    orderBy?: UserJoinAcademicEventsOrderByWithRelationInput | UserJoinAcademicEventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserJoinAcademicEventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserJoinAcademicEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserJoinAcademicEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserJoinAcademicEvents
    **/
    _count?: true | UserJoinAcademicEventsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserJoinAcademicEventsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserJoinAcademicEventsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserJoinAcademicEventsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserJoinAcademicEventsMaxAggregateInputType
  }

  export type GetUserJoinAcademicEventsAggregateType<T extends UserJoinAcademicEventsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserJoinAcademicEvents]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserJoinAcademicEvents[P]>
      : GetScalarType<T[P], AggregateUserJoinAcademicEvents[P]>
  }




  export type UserJoinAcademicEventsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserJoinAcademicEventsWhereInput
    orderBy?: UserJoinAcademicEventsOrderByWithAggregationInput | UserJoinAcademicEventsOrderByWithAggregationInput[]
    by: UserJoinAcademicEventsScalarFieldEnum[] | UserJoinAcademicEventsScalarFieldEnum
    having?: UserJoinAcademicEventsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserJoinAcademicEventsCountAggregateInputType | true
    _avg?: UserJoinAcademicEventsAvgAggregateInputType
    _sum?: UserJoinAcademicEventsSumAggregateInputType
    _min?: UserJoinAcademicEventsMinAggregateInputType
    _max?: UserJoinAcademicEventsMaxAggregateInputType
  }

  export type UserJoinAcademicEventsGroupByOutputType = {
    idUserJoinAcademicEvents: number
    idUser: number
    idAcademicEvents: number
    _count: UserJoinAcademicEventsCountAggregateOutputType | null
    _avg: UserJoinAcademicEventsAvgAggregateOutputType | null
    _sum: UserJoinAcademicEventsSumAggregateOutputType | null
    _min: UserJoinAcademicEventsMinAggregateOutputType | null
    _max: UserJoinAcademicEventsMaxAggregateOutputType | null
  }

  type GetUserJoinAcademicEventsGroupByPayload<T extends UserJoinAcademicEventsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserJoinAcademicEventsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserJoinAcademicEventsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserJoinAcademicEventsGroupByOutputType[P]>
            : GetScalarType<T[P], UserJoinAcademicEventsGroupByOutputType[P]>
        }
      >
    >


  export type UserJoinAcademicEventsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idUserJoinAcademicEvents?: boolean
    idUser?: boolean
    idAcademicEvents?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    academicEvent?: boolean | AcademicEventsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userJoinAcademicEvents"]>



  export type UserJoinAcademicEventsSelectScalar = {
    idUserJoinAcademicEvents?: boolean
    idUser?: boolean
    idAcademicEvents?: boolean
  }

  export type UserJoinAcademicEventsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"idUserJoinAcademicEvents" | "idUser" | "idAcademicEvents", ExtArgs["result"]["userJoinAcademicEvents"]>
  export type UserJoinAcademicEventsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    academicEvent?: boolean | AcademicEventsDefaultArgs<ExtArgs>
  }

  export type $UserJoinAcademicEventsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserJoinAcademicEvents"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      academicEvent: Prisma.$AcademicEventsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idUserJoinAcademicEvents: number
      idUser: number
      idAcademicEvents: number
    }, ExtArgs["result"]["userJoinAcademicEvents"]>
    composites: {}
  }

  type UserJoinAcademicEventsGetPayload<S extends boolean | null | undefined | UserJoinAcademicEventsDefaultArgs> = $Result.GetResult<Prisma.$UserJoinAcademicEventsPayload, S>

  type UserJoinAcademicEventsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserJoinAcademicEventsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserJoinAcademicEventsCountAggregateInputType | true
    }

  export interface UserJoinAcademicEventsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserJoinAcademicEvents'], meta: { name: 'UserJoinAcademicEvents' } }
    /**
     * Find zero or one UserJoinAcademicEvents that matches the filter.
     * @param {UserJoinAcademicEventsFindUniqueArgs} args - Arguments to find a UserJoinAcademicEvents
     * @example
     * // Get one UserJoinAcademicEvents
     * const userJoinAcademicEvents = await prisma.userJoinAcademicEvents.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserJoinAcademicEventsFindUniqueArgs>(args: SelectSubset<T, UserJoinAcademicEventsFindUniqueArgs<ExtArgs>>): Prisma__UserJoinAcademicEventsClient<$Result.GetResult<Prisma.$UserJoinAcademicEventsPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one UserJoinAcademicEvents that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserJoinAcademicEventsFindUniqueOrThrowArgs} args - Arguments to find a UserJoinAcademicEvents
     * @example
     * // Get one UserJoinAcademicEvents
     * const userJoinAcademicEvents = await prisma.userJoinAcademicEvents.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserJoinAcademicEventsFindUniqueOrThrowArgs>(args: SelectSubset<T, UserJoinAcademicEventsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserJoinAcademicEventsClient<$Result.GetResult<Prisma.$UserJoinAcademicEventsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first UserJoinAcademicEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserJoinAcademicEventsFindFirstArgs} args - Arguments to find a UserJoinAcademicEvents
     * @example
     * // Get one UserJoinAcademicEvents
     * const userJoinAcademicEvents = await prisma.userJoinAcademicEvents.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserJoinAcademicEventsFindFirstArgs>(args?: SelectSubset<T, UserJoinAcademicEventsFindFirstArgs<ExtArgs>>): Prisma__UserJoinAcademicEventsClient<$Result.GetResult<Prisma.$UserJoinAcademicEventsPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first UserJoinAcademicEvents that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserJoinAcademicEventsFindFirstOrThrowArgs} args - Arguments to find a UserJoinAcademicEvents
     * @example
     * // Get one UserJoinAcademicEvents
     * const userJoinAcademicEvents = await prisma.userJoinAcademicEvents.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserJoinAcademicEventsFindFirstOrThrowArgs>(args?: SelectSubset<T, UserJoinAcademicEventsFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserJoinAcademicEventsClient<$Result.GetResult<Prisma.$UserJoinAcademicEventsPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more UserJoinAcademicEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserJoinAcademicEventsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserJoinAcademicEvents
     * const userJoinAcademicEvents = await prisma.userJoinAcademicEvents.findMany()
     * 
     * // Get first 10 UserJoinAcademicEvents
     * const userJoinAcademicEvents = await prisma.userJoinAcademicEvents.findMany({ take: 10 })
     * 
     * // Only select the `idUserJoinAcademicEvents`
     * const userJoinAcademicEventsWithIdUserJoinAcademicEventsOnly = await prisma.userJoinAcademicEvents.findMany({ select: { idUserJoinAcademicEvents: true } })
     * 
     */
    findMany<T extends UserJoinAcademicEventsFindManyArgs>(args?: SelectSubset<T, UserJoinAcademicEventsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserJoinAcademicEventsPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a UserJoinAcademicEvents.
     * @param {UserJoinAcademicEventsCreateArgs} args - Arguments to create a UserJoinAcademicEvents.
     * @example
     * // Create one UserJoinAcademicEvents
     * const UserJoinAcademicEvents = await prisma.userJoinAcademicEvents.create({
     *   data: {
     *     // ... data to create a UserJoinAcademicEvents
     *   }
     * })
     * 
     */
    create<T extends UserJoinAcademicEventsCreateArgs>(args: SelectSubset<T, UserJoinAcademicEventsCreateArgs<ExtArgs>>): Prisma__UserJoinAcademicEventsClient<$Result.GetResult<Prisma.$UserJoinAcademicEventsPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many UserJoinAcademicEvents.
     * @param {UserJoinAcademicEventsCreateManyArgs} args - Arguments to create many UserJoinAcademicEvents.
     * @example
     * // Create many UserJoinAcademicEvents
     * const userJoinAcademicEvents = await prisma.userJoinAcademicEvents.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserJoinAcademicEventsCreateManyArgs>(args?: SelectSubset<T, UserJoinAcademicEventsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserJoinAcademicEvents.
     * @param {UserJoinAcademicEventsDeleteArgs} args - Arguments to delete one UserJoinAcademicEvents.
     * @example
     * // Delete one UserJoinAcademicEvents
     * const UserJoinAcademicEvents = await prisma.userJoinAcademicEvents.delete({
     *   where: {
     *     // ... filter to delete one UserJoinAcademicEvents
     *   }
     * })
     * 
     */
    delete<T extends UserJoinAcademicEventsDeleteArgs>(args: SelectSubset<T, UserJoinAcademicEventsDeleteArgs<ExtArgs>>): Prisma__UserJoinAcademicEventsClient<$Result.GetResult<Prisma.$UserJoinAcademicEventsPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one UserJoinAcademicEvents.
     * @param {UserJoinAcademicEventsUpdateArgs} args - Arguments to update one UserJoinAcademicEvents.
     * @example
     * // Update one UserJoinAcademicEvents
     * const userJoinAcademicEvents = await prisma.userJoinAcademicEvents.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserJoinAcademicEventsUpdateArgs>(args: SelectSubset<T, UserJoinAcademicEventsUpdateArgs<ExtArgs>>): Prisma__UserJoinAcademicEventsClient<$Result.GetResult<Prisma.$UserJoinAcademicEventsPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more UserJoinAcademicEvents.
     * @param {UserJoinAcademicEventsDeleteManyArgs} args - Arguments to filter UserJoinAcademicEvents to delete.
     * @example
     * // Delete a few UserJoinAcademicEvents
     * const { count } = await prisma.userJoinAcademicEvents.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserJoinAcademicEventsDeleteManyArgs>(args?: SelectSubset<T, UserJoinAcademicEventsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserJoinAcademicEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserJoinAcademicEventsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserJoinAcademicEvents
     * const userJoinAcademicEvents = await prisma.userJoinAcademicEvents.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserJoinAcademicEventsUpdateManyArgs>(args: SelectSubset<T, UserJoinAcademicEventsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserJoinAcademicEvents.
     * @param {UserJoinAcademicEventsUpsertArgs} args - Arguments to update or create a UserJoinAcademicEvents.
     * @example
     * // Update or create a UserJoinAcademicEvents
     * const userJoinAcademicEvents = await prisma.userJoinAcademicEvents.upsert({
     *   create: {
     *     // ... data to create a UserJoinAcademicEvents
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserJoinAcademicEvents we want to update
     *   }
     * })
     */
    upsert<T extends UserJoinAcademicEventsUpsertArgs>(args: SelectSubset<T, UserJoinAcademicEventsUpsertArgs<ExtArgs>>): Prisma__UserJoinAcademicEventsClient<$Result.GetResult<Prisma.$UserJoinAcademicEventsPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of UserJoinAcademicEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserJoinAcademicEventsCountArgs} args - Arguments to filter UserJoinAcademicEvents to count.
     * @example
     * // Count the number of UserJoinAcademicEvents
     * const count = await prisma.userJoinAcademicEvents.count({
     *   where: {
     *     // ... the filter for the UserJoinAcademicEvents we want to count
     *   }
     * })
    **/
    count<T extends UserJoinAcademicEventsCountArgs>(
      args?: Subset<T, UserJoinAcademicEventsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserJoinAcademicEventsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserJoinAcademicEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserJoinAcademicEventsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserJoinAcademicEventsAggregateArgs>(args: Subset<T, UserJoinAcademicEventsAggregateArgs>): Prisma.PrismaPromise<GetUserJoinAcademicEventsAggregateType<T>>

    /**
     * Group by UserJoinAcademicEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserJoinAcademicEventsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserJoinAcademicEventsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserJoinAcademicEventsGroupByArgs['orderBy'] }
        : { orderBy?: UserJoinAcademicEventsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserJoinAcademicEventsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserJoinAcademicEventsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserJoinAcademicEvents model
   */
  readonly fields: UserJoinAcademicEventsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserJoinAcademicEvents.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserJoinAcademicEventsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    academicEvent<T extends AcademicEventsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, AcademicEventsDefaultArgs<ExtArgs>>): Prisma__AcademicEventsClient<$Result.GetResult<Prisma.$AcademicEventsPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserJoinAcademicEvents model
   */ 
  interface UserJoinAcademicEventsFieldRefs {
    readonly idUserJoinAcademicEvents: FieldRef<"UserJoinAcademicEvents", 'Int'>
    readonly idUser: FieldRef<"UserJoinAcademicEvents", 'Int'>
    readonly idAcademicEvents: FieldRef<"UserJoinAcademicEvents", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * UserJoinAcademicEvents findUnique
   */
  export type UserJoinAcademicEventsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserJoinAcademicEvents
     */
    select?: UserJoinAcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserJoinAcademicEvents
     */
    omit?: UserJoinAcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserJoinAcademicEventsInclude<ExtArgs> | null
    /**
     * Filter, which UserJoinAcademicEvents to fetch.
     */
    where: UserJoinAcademicEventsWhereUniqueInput
  }

  /**
   * UserJoinAcademicEvents findUniqueOrThrow
   */
  export type UserJoinAcademicEventsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserJoinAcademicEvents
     */
    select?: UserJoinAcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserJoinAcademicEvents
     */
    omit?: UserJoinAcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserJoinAcademicEventsInclude<ExtArgs> | null
    /**
     * Filter, which UserJoinAcademicEvents to fetch.
     */
    where: UserJoinAcademicEventsWhereUniqueInput
  }

  /**
   * UserJoinAcademicEvents findFirst
   */
  export type UserJoinAcademicEventsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserJoinAcademicEvents
     */
    select?: UserJoinAcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserJoinAcademicEvents
     */
    omit?: UserJoinAcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserJoinAcademicEventsInclude<ExtArgs> | null
    /**
     * Filter, which UserJoinAcademicEvents to fetch.
     */
    where?: UserJoinAcademicEventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserJoinAcademicEvents to fetch.
     */
    orderBy?: UserJoinAcademicEventsOrderByWithRelationInput | UserJoinAcademicEventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserJoinAcademicEvents.
     */
    cursor?: UserJoinAcademicEventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserJoinAcademicEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserJoinAcademicEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserJoinAcademicEvents.
     */
    distinct?: UserJoinAcademicEventsScalarFieldEnum | UserJoinAcademicEventsScalarFieldEnum[]
  }

  /**
   * UserJoinAcademicEvents findFirstOrThrow
   */
  export type UserJoinAcademicEventsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserJoinAcademicEvents
     */
    select?: UserJoinAcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserJoinAcademicEvents
     */
    omit?: UserJoinAcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserJoinAcademicEventsInclude<ExtArgs> | null
    /**
     * Filter, which UserJoinAcademicEvents to fetch.
     */
    where?: UserJoinAcademicEventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserJoinAcademicEvents to fetch.
     */
    orderBy?: UserJoinAcademicEventsOrderByWithRelationInput | UserJoinAcademicEventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserJoinAcademicEvents.
     */
    cursor?: UserJoinAcademicEventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserJoinAcademicEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserJoinAcademicEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserJoinAcademicEvents.
     */
    distinct?: UserJoinAcademicEventsScalarFieldEnum | UserJoinAcademicEventsScalarFieldEnum[]
  }

  /**
   * UserJoinAcademicEvents findMany
   */
  export type UserJoinAcademicEventsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserJoinAcademicEvents
     */
    select?: UserJoinAcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserJoinAcademicEvents
     */
    omit?: UserJoinAcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserJoinAcademicEventsInclude<ExtArgs> | null
    /**
     * Filter, which UserJoinAcademicEvents to fetch.
     */
    where?: UserJoinAcademicEventsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserJoinAcademicEvents to fetch.
     */
    orderBy?: UserJoinAcademicEventsOrderByWithRelationInput | UserJoinAcademicEventsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserJoinAcademicEvents.
     */
    cursor?: UserJoinAcademicEventsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserJoinAcademicEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserJoinAcademicEvents.
     */
    skip?: number
    distinct?: UserJoinAcademicEventsScalarFieldEnum | UserJoinAcademicEventsScalarFieldEnum[]
  }

  /**
   * UserJoinAcademicEvents create
   */
  export type UserJoinAcademicEventsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserJoinAcademicEvents
     */
    select?: UserJoinAcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserJoinAcademicEvents
     */
    omit?: UserJoinAcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserJoinAcademicEventsInclude<ExtArgs> | null
    /**
     * The data needed to create a UserJoinAcademicEvents.
     */
    data: XOR<UserJoinAcademicEventsCreateInput, UserJoinAcademicEventsUncheckedCreateInput>
  }

  /**
   * UserJoinAcademicEvents createMany
   */
  export type UserJoinAcademicEventsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserJoinAcademicEvents.
     */
    data: UserJoinAcademicEventsCreateManyInput | UserJoinAcademicEventsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserJoinAcademicEvents update
   */
  export type UserJoinAcademicEventsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserJoinAcademicEvents
     */
    select?: UserJoinAcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserJoinAcademicEvents
     */
    omit?: UserJoinAcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserJoinAcademicEventsInclude<ExtArgs> | null
    /**
     * The data needed to update a UserJoinAcademicEvents.
     */
    data: XOR<UserJoinAcademicEventsUpdateInput, UserJoinAcademicEventsUncheckedUpdateInput>
    /**
     * Choose, which UserJoinAcademicEvents to update.
     */
    where: UserJoinAcademicEventsWhereUniqueInput
  }

  /**
   * UserJoinAcademicEvents updateMany
   */
  export type UserJoinAcademicEventsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserJoinAcademicEvents.
     */
    data: XOR<UserJoinAcademicEventsUpdateManyMutationInput, UserJoinAcademicEventsUncheckedUpdateManyInput>
    /**
     * Filter which UserJoinAcademicEvents to update
     */
    where?: UserJoinAcademicEventsWhereInput
  }

  /**
   * UserJoinAcademicEvents upsert
   */
  export type UserJoinAcademicEventsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserJoinAcademicEvents
     */
    select?: UserJoinAcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserJoinAcademicEvents
     */
    omit?: UserJoinAcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserJoinAcademicEventsInclude<ExtArgs> | null
    /**
     * The filter to search for the UserJoinAcademicEvents to update in case it exists.
     */
    where: UserJoinAcademicEventsWhereUniqueInput
    /**
     * In case the UserJoinAcademicEvents found by the `where` argument doesn't exist, create a new UserJoinAcademicEvents with this data.
     */
    create: XOR<UserJoinAcademicEventsCreateInput, UserJoinAcademicEventsUncheckedCreateInput>
    /**
     * In case the UserJoinAcademicEvents was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserJoinAcademicEventsUpdateInput, UserJoinAcademicEventsUncheckedUpdateInput>
  }

  /**
   * UserJoinAcademicEvents delete
   */
  export type UserJoinAcademicEventsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserJoinAcademicEvents
     */
    select?: UserJoinAcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserJoinAcademicEvents
     */
    omit?: UserJoinAcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserJoinAcademicEventsInclude<ExtArgs> | null
    /**
     * Filter which UserJoinAcademicEvents to delete.
     */
    where: UserJoinAcademicEventsWhereUniqueInput
  }

  /**
   * UserJoinAcademicEvents deleteMany
   */
  export type UserJoinAcademicEventsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserJoinAcademicEvents to delete
     */
    where?: UserJoinAcademicEventsWhereInput
  }

  /**
   * UserJoinAcademicEvents without action
   */
  export type UserJoinAcademicEventsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserJoinAcademicEvents
     */
    select?: UserJoinAcademicEventsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserJoinAcademicEvents
     */
    omit?: UserJoinAcademicEventsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserJoinAcademicEventsInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    idUser: 'idUser',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password',
    phoneNumber: 'phoneNumber',
    elementarySchool: 'elementarySchool',
    juniorHighSchool: 'juniorHighSchool',
    seniorHighSchool: 'seniorHighSchool',
    university: 'university',
    gender: 'gender',
    about: 'about',
    birthdate: 'birthdate',
    refreshToken: 'refreshToken'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const EventOrganizerScalarFieldEnum: {
    idOrganizer: 'idOrganizer',
    email: 'email',
    password: 'password',
    organizerName: 'organizerName',
    organizerInstitution: 'organizerInstitution',
    organizerAddress: 'organizerAddress',
    phoneNumber: 'phoneNumber'
  };

  export type EventOrganizerScalarFieldEnum = (typeof EventOrganizerScalarFieldEnum)[keyof typeof EventOrganizerScalarFieldEnum]


  export const AcademicEventsScalarFieldEnum: {
    idAcademicEvents: 'idAcademicEvents',
    idOrganizer: 'idOrganizer',
    eventsName: 'eventsName',
    eventsLoc: 'eventsLoc',
    eventsJenjang: 'eventsJenjang',
    eventsHeld: 'eventsHeld',
    eventCategory: 'eventCategory',
    eventsDate: 'eventsDate',
    registrationDate: 'registrationDate',
    eventsTheme: 'eventsTheme',
    registrationFee: 'registrationFee',
    capacityTotal: 'capacityTotal',
    capacityTersisa: 'capacityTersisa',
    capacityStatus: 'capacityStatus',
    deskripsiEvent: 'deskripsiEvent'
  };

  export type AcademicEventsScalarFieldEnum = (typeof AcademicEventsScalarFieldEnum)[keyof typeof AcademicEventsScalarFieldEnum]


  export const UserJoinAcademicEventsScalarFieldEnum: {
    idUserJoinAcademicEvents: 'idUserJoinAcademicEvents',
    idUser: 'idUser',
    idAcademicEvents: 'idAcademicEvents'
  };

  export type UserJoinAcademicEventsScalarFieldEnum = (typeof UserJoinAcademicEventsScalarFieldEnum)[keyof typeof UserJoinAcademicEventsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    password: 'password',
    phoneNumber: 'phoneNumber',
    elementarySchool: 'elementarySchool',
    juniorHighSchool: 'juniorHighSchool',
    seniorHighSchool: 'seniorHighSchool',
    university: 'university',
    about: 'about',
    refreshToken: 'refreshToken'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const EventOrganizerOrderByRelevanceFieldEnum: {
    email: 'email',
    password: 'password',
    organizerName: 'organizerName',
    organizerInstitution: 'organizerInstitution',
    organizerAddress: 'organizerAddress',
    phoneNumber: 'phoneNumber'
  };

  export type EventOrganizerOrderByRelevanceFieldEnum = (typeof EventOrganizerOrderByRelevanceFieldEnum)[keyof typeof EventOrganizerOrderByRelevanceFieldEnum]


  export const AcademicEventsOrderByRelevanceFieldEnum: {
    eventsName: 'eventsName',
    eventsLoc: 'eventsLoc',
    eventCategory: 'eventCategory',
    eventsTheme: 'eventsTheme',
    deskripsiEvent: 'deskripsiEvent'
  };

  export type AcademicEventsOrderByRelevanceFieldEnum = (typeof AcademicEventsOrderByRelevanceFieldEnum)[keyof typeof AcademicEventsOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'EventJenjang'
   */
  export type EnumEventJenjangFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventJenjang'>
    


  /**
   * Reference to a field of type 'EventHeld'
   */
  export type EnumEventHeldFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'EventHeld'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'CapacityStatus'
   */
  export type EnumCapacityStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CapacityStatus'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    idUser?: IntFilter<"User"> | number
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    elementarySchool?: StringFilter<"User"> | string
    juniorHighSchool?: StringFilter<"User"> | string
    seniorHighSchool?: StringFilter<"User"> | string
    university?: StringFilter<"User"> | string
    gender?: EnumGenderFilter<"User"> | $Enums.Gender
    about?: StringFilter<"User"> | string
    birthdate?: DateTimeFilter<"User"> | Date | string
    refreshToken?: StringNullableFilter<"User"> | string | null
    userAcademicEvents?: UserJoinAcademicEventsListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    idUser?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    elementarySchool?: SortOrder
    juniorHighSchool?: SortOrder
    seniorHighSchool?: SortOrder
    university?: SortOrder
    gender?: SortOrder
    about?: SortOrder
    birthdate?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    userAcademicEvents?: UserJoinAcademicEventsOrderByRelationAggregateInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    idUser?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    phoneNumber?: StringFilter<"User"> | string
    elementarySchool?: StringFilter<"User"> | string
    juniorHighSchool?: StringFilter<"User"> | string
    seniorHighSchool?: StringFilter<"User"> | string
    university?: StringFilter<"User"> | string
    gender?: EnumGenderFilter<"User"> | $Enums.Gender
    about?: StringFilter<"User"> | string
    birthdate?: DateTimeFilter<"User"> | Date | string
    refreshToken?: StringNullableFilter<"User"> | string | null
    userAcademicEvents?: UserJoinAcademicEventsListRelationFilter
  }, "idUser" | "email">

  export type UserOrderByWithAggregationInput = {
    idUser?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    elementarySchool?: SortOrder
    juniorHighSchool?: SortOrder
    seniorHighSchool?: SortOrder
    university?: SortOrder
    gender?: SortOrder
    about?: SortOrder
    birthdate?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    idUser?: IntWithAggregatesFilter<"User"> | number
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    phoneNumber?: StringWithAggregatesFilter<"User"> | string
    elementarySchool?: StringWithAggregatesFilter<"User"> | string
    juniorHighSchool?: StringWithAggregatesFilter<"User"> | string
    seniorHighSchool?: StringWithAggregatesFilter<"User"> | string
    university?: StringWithAggregatesFilter<"User"> | string
    gender?: EnumGenderWithAggregatesFilter<"User"> | $Enums.Gender
    about?: StringWithAggregatesFilter<"User"> | string
    birthdate?: DateTimeWithAggregatesFilter<"User"> | Date | string
    refreshToken?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type EventOrganizerWhereInput = {
    AND?: EventOrganizerWhereInput | EventOrganizerWhereInput[]
    OR?: EventOrganizerWhereInput[]
    NOT?: EventOrganizerWhereInput | EventOrganizerWhereInput[]
    idOrganizer?: IntFilter<"EventOrganizer"> | number
    email?: StringFilter<"EventOrganizer"> | string
    password?: StringFilter<"EventOrganizer"> | string
    organizerName?: StringFilter<"EventOrganizer"> | string
    organizerInstitution?: StringFilter<"EventOrganizer"> | string
    organizerAddress?: StringFilter<"EventOrganizer"> | string
    phoneNumber?: StringFilter<"EventOrganizer"> | string
    events?: AcademicEventsListRelationFilter
  }

  export type EventOrganizerOrderByWithRelationInput = {
    idOrganizer?: SortOrder
    email?: SortOrder
    password?: SortOrder
    organizerName?: SortOrder
    organizerInstitution?: SortOrder
    organizerAddress?: SortOrder
    phoneNumber?: SortOrder
    events?: AcademicEventsOrderByRelationAggregateInput
    _relevance?: EventOrganizerOrderByRelevanceInput
  }

  export type EventOrganizerWhereUniqueInput = Prisma.AtLeast<{
    idOrganizer?: number
    email?: string
    AND?: EventOrganizerWhereInput | EventOrganizerWhereInput[]
    OR?: EventOrganizerWhereInput[]
    NOT?: EventOrganizerWhereInput | EventOrganizerWhereInput[]
    password?: StringFilter<"EventOrganizer"> | string
    organizerName?: StringFilter<"EventOrganizer"> | string
    organizerInstitution?: StringFilter<"EventOrganizer"> | string
    organizerAddress?: StringFilter<"EventOrganizer"> | string
    phoneNumber?: StringFilter<"EventOrganizer"> | string
    events?: AcademicEventsListRelationFilter
  }, "idOrganizer" | "email">

  export type EventOrganizerOrderByWithAggregationInput = {
    idOrganizer?: SortOrder
    email?: SortOrder
    password?: SortOrder
    organizerName?: SortOrder
    organizerInstitution?: SortOrder
    organizerAddress?: SortOrder
    phoneNumber?: SortOrder
    _count?: EventOrganizerCountOrderByAggregateInput
    _avg?: EventOrganizerAvgOrderByAggregateInput
    _max?: EventOrganizerMaxOrderByAggregateInput
    _min?: EventOrganizerMinOrderByAggregateInput
    _sum?: EventOrganizerSumOrderByAggregateInput
  }

  export type EventOrganizerScalarWhereWithAggregatesInput = {
    AND?: EventOrganizerScalarWhereWithAggregatesInput | EventOrganizerScalarWhereWithAggregatesInput[]
    OR?: EventOrganizerScalarWhereWithAggregatesInput[]
    NOT?: EventOrganizerScalarWhereWithAggregatesInput | EventOrganizerScalarWhereWithAggregatesInput[]
    idOrganizer?: IntWithAggregatesFilter<"EventOrganizer"> | number
    email?: StringWithAggregatesFilter<"EventOrganizer"> | string
    password?: StringWithAggregatesFilter<"EventOrganizer"> | string
    organizerName?: StringWithAggregatesFilter<"EventOrganizer"> | string
    organizerInstitution?: StringWithAggregatesFilter<"EventOrganizer"> | string
    organizerAddress?: StringWithAggregatesFilter<"EventOrganizer"> | string
    phoneNumber?: StringWithAggregatesFilter<"EventOrganizer"> | string
  }

  export type AcademicEventsWhereInput = {
    AND?: AcademicEventsWhereInput | AcademicEventsWhereInput[]
    OR?: AcademicEventsWhereInput[]
    NOT?: AcademicEventsWhereInput | AcademicEventsWhereInput[]
    idAcademicEvents?: IntFilter<"AcademicEvents"> | number
    idOrganizer?: IntFilter<"AcademicEvents"> | number
    eventsName?: StringFilter<"AcademicEvents"> | string
    eventsLoc?: StringFilter<"AcademicEvents"> | string
    eventsJenjang?: EnumEventJenjangFilter<"AcademicEvents"> | $Enums.EventJenjang
    eventsHeld?: EnumEventHeldFilter<"AcademicEvents"> | $Enums.EventHeld
    eventCategory?: StringFilter<"AcademicEvents"> | string
    eventsDate?: DateTimeFilter<"AcademicEvents"> | Date | string
    registrationDate?: DateTimeFilter<"AcademicEvents"> | Date | string
    eventsTheme?: StringFilter<"AcademicEvents"> | string
    registrationFee?: FloatFilter<"AcademicEvents"> | number
    capacityTotal?: IntNullableFilter<"AcademicEvents"> | number | null
    capacityTersisa?: IntNullableFilter<"AcademicEvents"> | number | null
    capacityStatus?: EnumCapacityStatusFilter<"AcademicEvents"> | $Enums.CapacityStatus
    deskripsiEvent?: StringFilter<"AcademicEvents"> | string
    eventOrganizer?: XOR<EventOrganizerScalarRelationFilter, EventOrganizerWhereInput>
    userJoins?: UserJoinAcademicEventsListRelationFilter
  }

  export type AcademicEventsOrderByWithRelationInput = {
    idAcademicEvents?: SortOrder
    idOrganizer?: SortOrder
    eventsName?: SortOrder
    eventsLoc?: SortOrder
    eventsJenjang?: SortOrder
    eventsHeld?: SortOrder
    eventCategory?: SortOrder
    eventsDate?: SortOrder
    registrationDate?: SortOrder
    eventsTheme?: SortOrder
    registrationFee?: SortOrder
    capacityTotal?: SortOrderInput | SortOrder
    capacityTersisa?: SortOrderInput | SortOrder
    capacityStatus?: SortOrder
    deskripsiEvent?: SortOrder
    eventOrganizer?: EventOrganizerOrderByWithRelationInput
    userJoins?: UserJoinAcademicEventsOrderByRelationAggregateInput
    _relevance?: AcademicEventsOrderByRelevanceInput
  }

  export type AcademicEventsWhereUniqueInput = Prisma.AtLeast<{
    idAcademicEvents?: number
    AND?: AcademicEventsWhereInput | AcademicEventsWhereInput[]
    OR?: AcademicEventsWhereInput[]
    NOT?: AcademicEventsWhereInput | AcademicEventsWhereInput[]
    idOrganizer?: IntFilter<"AcademicEvents"> | number
    eventsName?: StringFilter<"AcademicEvents"> | string
    eventsLoc?: StringFilter<"AcademicEvents"> | string
    eventsJenjang?: EnumEventJenjangFilter<"AcademicEvents"> | $Enums.EventJenjang
    eventsHeld?: EnumEventHeldFilter<"AcademicEvents"> | $Enums.EventHeld
    eventCategory?: StringFilter<"AcademicEvents"> | string
    eventsDate?: DateTimeFilter<"AcademicEvents"> | Date | string
    registrationDate?: DateTimeFilter<"AcademicEvents"> | Date | string
    eventsTheme?: StringFilter<"AcademicEvents"> | string
    registrationFee?: FloatFilter<"AcademicEvents"> | number
    capacityTotal?: IntNullableFilter<"AcademicEvents"> | number | null
    capacityTersisa?: IntNullableFilter<"AcademicEvents"> | number | null
    capacityStatus?: EnumCapacityStatusFilter<"AcademicEvents"> | $Enums.CapacityStatus
    deskripsiEvent?: StringFilter<"AcademicEvents"> | string
    eventOrganizer?: XOR<EventOrganizerScalarRelationFilter, EventOrganizerWhereInput>
    userJoins?: UserJoinAcademicEventsListRelationFilter
  }, "idAcademicEvents">

  export type AcademicEventsOrderByWithAggregationInput = {
    idAcademicEvents?: SortOrder
    idOrganizer?: SortOrder
    eventsName?: SortOrder
    eventsLoc?: SortOrder
    eventsJenjang?: SortOrder
    eventsHeld?: SortOrder
    eventCategory?: SortOrder
    eventsDate?: SortOrder
    registrationDate?: SortOrder
    eventsTheme?: SortOrder
    registrationFee?: SortOrder
    capacityTotal?: SortOrderInput | SortOrder
    capacityTersisa?: SortOrderInput | SortOrder
    capacityStatus?: SortOrder
    deskripsiEvent?: SortOrder
    _count?: AcademicEventsCountOrderByAggregateInput
    _avg?: AcademicEventsAvgOrderByAggregateInput
    _max?: AcademicEventsMaxOrderByAggregateInput
    _min?: AcademicEventsMinOrderByAggregateInput
    _sum?: AcademicEventsSumOrderByAggregateInput
  }

  export type AcademicEventsScalarWhereWithAggregatesInput = {
    AND?: AcademicEventsScalarWhereWithAggregatesInput | AcademicEventsScalarWhereWithAggregatesInput[]
    OR?: AcademicEventsScalarWhereWithAggregatesInput[]
    NOT?: AcademicEventsScalarWhereWithAggregatesInput | AcademicEventsScalarWhereWithAggregatesInput[]
    idAcademicEvents?: IntWithAggregatesFilter<"AcademicEvents"> | number
    idOrganizer?: IntWithAggregatesFilter<"AcademicEvents"> | number
    eventsName?: StringWithAggregatesFilter<"AcademicEvents"> | string
    eventsLoc?: StringWithAggregatesFilter<"AcademicEvents"> | string
    eventsJenjang?: EnumEventJenjangWithAggregatesFilter<"AcademicEvents"> | $Enums.EventJenjang
    eventsHeld?: EnumEventHeldWithAggregatesFilter<"AcademicEvents"> | $Enums.EventHeld
    eventCategory?: StringWithAggregatesFilter<"AcademicEvents"> | string
    eventsDate?: DateTimeWithAggregatesFilter<"AcademicEvents"> | Date | string
    registrationDate?: DateTimeWithAggregatesFilter<"AcademicEvents"> | Date | string
    eventsTheme?: StringWithAggregatesFilter<"AcademicEvents"> | string
    registrationFee?: FloatWithAggregatesFilter<"AcademicEvents"> | number
    capacityTotal?: IntNullableWithAggregatesFilter<"AcademicEvents"> | number | null
    capacityTersisa?: IntNullableWithAggregatesFilter<"AcademicEvents"> | number | null
    capacityStatus?: EnumCapacityStatusWithAggregatesFilter<"AcademicEvents"> | $Enums.CapacityStatus
    deskripsiEvent?: StringWithAggregatesFilter<"AcademicEvents"> | string
  }

  export type UserJoinAcademicEventsWhereInput = {
    AND?: UserJoinAcademicEventsWhereInput | UserJoinAcademicEventsWhereInput[]
    OR?: UserJoinAcademicEventsWhereInput[]
    NOT?: UserJoinAcademicEventsWhereInput | UserJoinAcademicEventsWhereInput[]
    idUserJoinAcademicEvents?: IntFilter<"UserJoinAcademicEvents"> | number
    idUser?: IntFilter<"UserJoinAcademicEvents"> | number
    idAcademicEvents?: IntFilter<"UserJoinAcademicEvents"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    academicEvent?: XOR<AcademicEventsScalarRelationFilter, AcademicEventsWhereInput>
  }

  export type UserJoinAcademicEventsOrderByWithRelationInput = {
    idUserJoinAcademicEvents?: SortOrder
    idUser?: SortOrder
    idAcademicEvents?: SortOrder
    user?: UserOrderByWithRelationInput
    academicEvent?: AcademicEventsOrderByWithRelationInput
  }

  export type UserJoinAcademicEventsWhereUniqueInput = Prisma.AtLeast<{
    idUserJoinAcademicEvents?: number
    AND?: UserJoinAcademicEventsWhereInput | UserJoinAcademicEventsWhereInput[]
    OR?: UserJoinAcademicEventsWhereInput[]
    NOT?: UserJoinAcademicEventsWhereInput | UserJoinAcademicEventsWhereInput[]
    idUser?: IntFilter<"UserJoinAcademicEvents"> | number
    idAcademicEvents?: IntFilter<"UserJoinAcademicEvents"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    academicEvent?: XOR<AcademicEventsScalarRelationFilter, AcademicEventsWhereInput>
  }, "idUserJoinAcademicEvents">

  export type UserJoinAcademicEventsOrderByWithAggregationInput = {
    idUserJoinAcademicEvents?: SortOrder
    idUser?: SortOrder
    idAcademicEvents?: SortOrder
    _count?: UserJoinAcademicEventsCountOrderByAggregateInput
    _avg?: UserJoinAcademicEventsAvgOrderByAggregateInput
    _max?: UserJoinAcademicEventsMaxOrderByAggregateInput
    _min?: UserJoinAcademicEventsMinOrderByAggregateInput
    _sum?: UserJoinAcademicEventsSumOrderByAggregateInput
  }

  export type UserJoinAcademicEventsScalarWhereWithAggregatesInput = {
    AND?: UserJoinAcademicEventsScalarWhereWithAggregatesInput | UserJoinAcademicEventsScalarWhereWithAggregatesInput[]
    OR?: UserJoinAcademicEventsScalarWhereWithAggregatesInput[]
    NOT?: UserJoinAcademicEventsScalarWhereWithAggregatesInput | UserJoinAcademicEventsScalarWhereWithAggregatesInput[]
    idUserJoinAcademicEvents?: IntWithAggregatesFilter<"UserJoinAcademicEvents"> | number
    idUser?: IntWithAggregatesFilter<"UserJoinAcademicEvents"> | number
    idAcademicEvents?: IntWithAggregatesFilter<"UserJoinAcademicEvents"> | number
  }

  export type UserCreateInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    phoneNumber: string
    elementarySchool: string
    juniorHighSchool: string
    seniorHighSchool: string
    university: string
    gender: $Enums.Gender
    about: string
    birthdate: Date | string
    refreshToken?: string | null
    userAcademicEvents?: UserJoinAcademicEventsCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    idUser?: number
    firstName: string
    lastName: string
    email: string
    password: string
    phoneNumber: string
    elementarySchool: string
    juniorHighSchool: string
    seniorHighSchool: string
    university: string
    gender: $Enums.Gender
    about: string
    birthdate: Date | string
    refreshToken?: string | null
    userAcademicEvents?: UserJoinAcademicEventsUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    elementarySchool?: StringFieldUpdateOperationsInput | string
    juniorHighSchool?: StringFieldUpdateOperationsInput | string
    seniorHighSchool?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    about?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    userAcademicEvents?: UserJoinAcademicEventsUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    elementarySchool?: StringFieldUpdateOperationsInput | string
    juniorHighSchool?: StringFieldUpdateOperationsInput | string
    seniorHighSchool?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    about?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    userAcademicEvents?: UserJoinAcademicEventsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    idUser?: number
    firstName: string
    lastName: string
    email: string
    password: string
    phoneNumber: string
    elementarySchool: string
    juniorHighSchool: string
    seniorHighSchool: string
    university: string
    gender: $Enums.Gender
    about: string
    birthdate: Date | string
    refreshToken?: string | null
  }

  export type UserUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    elementarySchool?: StringFieldUpdateOperationsInput | string
    juniorHighSchool?: StringFieldUpdateOperationsInput | string
    seniorHighSchool?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    about?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    elementarySchool?: StringFieldUpdateOperationsInput | string
    juniorHighSchool?: StringFieldUpdateOperationsInput | string
    seniorHighSchool?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    about?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EventOrganizerCreateInput = {
    email: string
    password: string
    organizerName: string
    organizerInstitution: string
    organizerAddress: string
    phoneNumber: string
    events?: AcademicEventsCreateNestedManyWithoutEventOrganizerInput
  }

  export type EventOrganizerUncheckedCreateInput = {
    idOrganizer?: number
    email: string
    password: string
    organizerName: string
    organizerInstitution: string
    organizerAddress: string
    phoneNumber: string
    events?: AcademicEventsUncheckedCreateNestedManyWithoutEventOrganizerInput
  }

  export type EventOrganizerUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    organizerName?: StringFieldUpdateOperationsInput | string
    organizerInstitution?: StringFieldUpdateOperationsInput | string
    organizerAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    events?: AcademicEventsUpdateManyWithoutEventOrganizerNestedInput
  }

  export type EventOrganizerUncheckedUpdateInput = {
    idOrganizer?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    organizerName?: StringFieldUpdateOperationsInput | string
    organizerInstitution?: StringFieldUpdateOperationsInput | string
    organizerAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    events?: AcademicEventsUncheckedUpdateManyWithoutEventOrganizerNestedInput
  }

  export type EventOrganizerCreateManyInput = {
    idOrganizer?: number
    email: string
    password: string
    organizerName: string
    organizerInstitution: string
    organizerAddress: string
    phoneNumber: string
  }

  export type EventOrganizerUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    organizerName?: StringFieldUpdateOperationsInput | string
    organizerInstitution?: StringFieldUpdateOperationsInput | string
    organizerAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
  }

  export type EventOrganizerUncheckedUpdateManyInput = {
    idOrganizer?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    organizerName?: StringFieldUpdateOperationsInput | string
    organizerInstitution?: StringFieldUpdateOperationsInput | string
    organizerAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
  }

  export type AcademicEventsCreateInput = {
    eventsName: string
    eventsLoc: string
    eventsJenjang: $Enums.EventJenjang
    eventsHeld: $Enums.EventHeld
    eventCategory: string
    eventsDate: Date | string
    registrationDate: Date | string
    eventsTheme: string
    registrationFee: number
    capacityTotal?: number | null
    capacityTersisa?: number | null
    capacityStatus: $Enums.CapacityStatus
    deskripsiEvent: string
    eventOrganizer: EventOrganizerCreateNestedOneWithoutEventsInput
    userJoins?: UserJoinAcademicEventsCreateNestedManyWithoutAcademicEventInput
  }

  export type AcademicEventsUncheckedCreateInput = {
    idAcademicEvents?: number
    idOrganizer: number
    eventsName: string
    eventsLoc: string
    eventsJenjang: $Enums.EventJenjang
    eventsHeld: $Enums.EventHeld
    eventCategory: string
    eventsDate: Date | string
    registrationDate: Date | string
    eventsTheme: string
    registrationFee: number
    capacityTotal?: number | null
    capacityTersisa?: number | null
    capacityStatus: $Enums.CapacityStatus
    deskripsiEvent: string
    userJoins?: UserJoinAcademicEventsUncheckedCreateNestedManyWithoutAcademicEventInput
  }

  export type AcademicEventsUpdateInput = {
    eventsName?: StringFieldUpdateOperationsInput | string
    eventsLoc?: StringFieldUpdateOperationsInput | string
    eventsJenjang?: EnumEventJenjangFieldUpdateOperationsInput | $Enums.EventJenjang
    eventsHeld?: EnumEventHeldFieldUpdateOperationsInput | $Enums.EventHeld
    eventCategory?: StringFieldUpdateOperationsInput | string
    eventsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    eventsTheme?: StringFieldUpdateOperationsInput | string
    registrationFee?: FloatFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    capacityTersisa?: NullableIntFieldUpdateOperationsInput | number | null
    capacityStatus?: EnumCapacityStatusFieldUpdateOperationsInput | $Enums.CapacityStatus
    deskripsiEvent?: StringFieldUpdateOperationsInput | string
    eventOrganizer?: EventOrganizerUpdateOneRequiredWithoutEventsNestedInput
    userJoins?: UserJoinAcademicEventsUpdateManyWithoutAcademicEventNestedInput
  }

  export type AcademicEventsUncheckedUpdateInput = {
    idAcademicEvents?: IntFieldUpdateOperationsInput | number
    idOrganizer?: IntFieldUpdateOperationsInput | number
    eventsName?: StringFieldUpdateOperationsInput | string
    eventsLoc?: StringFieldUpdateOperationsInput | string
    eventsJenjang?: EnumEventJenjangFieldUpdateOperationsInput | $Enums.EventJenjang
    eventsHeld?: EnumEventHeldFieldUpdateOperationsInput | $Enums.EventHeld
    eventCategory?: StringFieldUpdateOperationsInput | string
    eventsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    eventsTheme?: StringFieldUpdateOperationsInput | string
    registrationFee?: FloatFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    capacityTersisa?: NullableIntFieldUpdateOperationsInput | number | null
    capacityStatus?: EnumCapacityStatusFieldUpdateOperationsInput | $Enums.CapacityStatus
    deskripsiEvent?: StringFieldUpdateOperationsInput | string
    userJoins?: UserJoinAcademicEventsUncheckedUpdateManyWithoutAcademicEventNestedInput
  }

  export type AcademicEventsCreateManyInput = {
    idAcademicEvents?: number
    idOrganizer: number
    eventsName: string
    eventsLoc: string
    eventsJenjang: $Enums.EventJenjang
    eventsHeld: $Enums.EventHeld
    eventCategory: string
    eventsDate: Date | string
    registrationDate: Date | string
    eventsTheme: string
    registrationFee: number
    capacityTotal?: number | null
    capacityTersisa?: number | null
    capacityStatus: $Enums.CapacityStatus
    deskripsiEvent: string
  }

  export type AcademicEventsUpdateManyMutationInput = {
    eventsName?: StringFieldUpdateOperationsInput | string
    eventsLoc?: StringFieldUpdateOperationsInput | string
    eventsJenjang?: EnumEventJenjangFieldUpdateOperationsInput | $Enums.EventJenjang
    eventsHeld?: EnumEventHeldFieldUpdateOperationsInput | $Enums.EventHeld
    eventCategory?: StringFieldUpdateOperationsInput | string
    eventsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    eventsTheme?: StringFieldUpdateOperationsInput | string
    registrationFee?: FloatFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    capacityTersisa?: NullableIntFieldUpdateOperationsInput | number | null
    capacityStatus?: EnumCapacityStatusFieldUpdateOperationsInput | $Enums.CapacityStatus
    deskripsiEvent?: StringFieldUpdateOperationsInput | string
  }

  export type AcademicEventsUncheckedUpdateManyInput = {
    idAcademicEvents?: IntFieldUpdateOperationsInput | number
    idOrganizer?: IntFieldUpdateOperationsInput | number
    eventsName?: StringFieldUpdateOperationsInput | string
    eventsLoc?: StringFieldUpdateOperationsInput | string
    eventsJenjang?: EnumEventJenjangFieldUpdateOperationsInput | $Enums.EventJenjang
    eventsHeld?: EnumEventHeldFieldUpdateOperationsInput | $Enums.EventHeld
    eventCategory?: StringFieldUpdateOperationsInput | string
    eventsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    eventsTheme?: StringFieldUpdateOperationsInput | string
    registrationFee?: FloatFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    capacityTersisa?: NullableIntFieldUpdateOperationsInput | number | null
    capacityStatus?: EnumCapacityStatusFieldUpdateOperationsInput | $Enums.CapacityStatus
    deskripsiEvent?: StringFieldUpdateOperationsInput | string
  }

  export type UserJoinAcademicEventsCreateInput = {
    user: UserCreateNestedOneWithoutUserAcademicEventsInput
    academicEvent: AcademicEventsCreateNestedOneWithoutUserJoinsInput
  }

  export type UserJoinAcademicEventsUncheckedCreateInput = {
    idUserJoinAcademicEvents?: number
    idUser: number
    idAcademicEvents: number
  }

  export type UserJoinAcademicEventsUpdateInput = {
    user?: UserUpdateOneRequiredWithoutUserAcademicEventsNestedInput
    academicEvent?: AcademicEventsUpdateOneRequiredWithoutUserJoinsNestedInput
  }

  export type UserJoinAcademicEventsUncheckedUpdateInput = {
    idUserJoinAcademicEvents?: IntFieldUpdateOperationsInput | number
    idUser?: IntFieldUpdateOperationsInput | number
    idAcademicEvents?: IntFieldUpdateOperationsInput | number
  }

  export type UserJoinAcademicEventsCreateManyInput = {
    idUserJoinAcademicEvents?: number
    idUser: number
    idAcademicEvents: number
  }

  export type UserJoinAcademicEventsUpdateManyMutationInput = {

  }

  export type UserJoinAcademicEventsUncheckedUpdateManyInput = {
    idUserJoinAcademicEvents?: IntFieldUpdateOperationsInput | number
    idUser?: IntFieldUpdateOperationsInput | number
    idAcademicEvents?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserJoinAcademicEventsListRelationFilter = {
    every?: UserJoinAcademicEventsWhereInput
    some?: UserJoinAcademicEventsWhereInput
    none?: UserJoinAcademicEventsWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserJoinAcademicEventsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    idUser?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    elementarySchool?: SortOrder
    juniorHighSchool?: SortOrder
    seniorHighSchool?: SortOrder
    university?: SortOrder
    gender?: SortOrder
    about?: SortOrder
    birthdate?: SortOrder
    refreshToken?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    idUser?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    idUser?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    elementarySchool?: SortOrder
    juniorHighSchool?: SortOrder
    seniorHighSchool?: SortOrder
    university?: SortOrder
    gender?: SortOrder
    about?: SortOrder
    birthdate?: SortOrder
    refreshToken?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    idUser?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    password?: SortOrder
    phoneNumber?: SortOrder
    elementarySchool?: SortOrder
    juniorHighSchool?: SortOrder
    seniorHighSchool?: SortOrder
    university?: SortOrder
    gender?: SortOrder
    about?: SortOrder
    birthdate?: SortOrder
    refreshToken?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    idUser?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type AcademicEventsListRelationFilter = {
    every?: AcademicEventsWhereInput
    some?: AcademicEventsWhereInput
    none?: AcademicEventsWhereInput
  }

  export type AcademicEventsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrganizerOrderByRelevanceInput = {
    fields: EventOrganizerOrderByRelevanceFieldEnum | EventOrganizerOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type EventOrganizerCountOrderByAggregateInput = {
    idOrganizer?: SortOrder
    email?: SortOrder
    password?: SortOrder
    organizerName?: SortOrder
    organizerInstitution?: SortOrder
    organizerAddress?: SortOrder
    phoneNumber?: SortOrder
  }

  export type EventOrganizerAvgOrderByAggregateInput = {
    idOrganizer?: SortOrder
  }

  export type EventOrganizerMaxOrderByAggregateInput = {
    idOrganizer?: SortOrder
    email?: SortOrder
    password?: SortOrder
    organizerName?: SortOrder
    organizerInstitution?: SortOrder
    organizerAddress?: SortOrder
    phoneNumber?: SortOrder
  }

  export type EventOrganizerMinOrderByAggregateInput = {
    idOrganizer?: SortOrder
    email?: SortOrder
    password?: SortOrder
    organizerName?: SortOrder
    organizerInstitution?: SortOrder
    organizerAddress?: SortOrder
    phoneNumber?: SortOrder
  }

  export type EventOrganizerSumOrderByAggregateInput = {
    idOrganizer?: SortOrder
  }

  export type EnumEventJenjangFilter<$PrismaModel = never> = {
    equals?: $Enums.EventJenjang | EnumEventJenjangFieldRefInput<$PrismaModel>
    in?: $Enums.EventJenjang[]
    notIn?: $Enums.EventJenjang[]
    not?: NestedEnumEventJenjangFilter<$PrismaModel> | $Enums.EventJenjang
  }

  export type EnumEventHeldFilter<$PrismaModel = never> = {
    equals?: $Enums.EventHeld | EnumEventHeldFieldRefInput<$PrismaModel>
    in?: $Enums.EventHeld[]
    notIn?: $Enums.EventHeld[]
    not?: NestedEnumEventHeldFilter<$PrismaModel> | $Enums.EventHeld
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumCapacityStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CapacityStatus | EnumCapacityStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CapacityStatus[]
    notIn?: $Enums.CapacityStatus[]
    not?: NestedEnumCapacityStatusFilter<$PrismaModel> | $Enums.CapacityStatus
  }

  export type EventOrganizerScalarRelationFilter = {
    is?: EventOrganizerWhereInput
    isNot?: EventOrganizerWhereInput
  }

  export type AcademicEventsOrderByRelevanceInput = {
    fields: AcademicEventsOrderByRelevanceFieldEnum | AcademicEventsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AcademicEventsCountOrderByAggregateInput = {
    idAcademicEvents?: SortOrder
    idOrganizer?: SortOrder
    eventsName?: SortOrder
    eventsLoc?: SortOrder
    eventsJenjang?: SortOrder
    eventsHeld?: SortOrder
    eventCategory?: SortOrder
    eventsDate?: SortOrder
    registrationDate?: SortOrder
    eventsTheme?: SortOrder
    registrationFee?: SortOrder
    capacityTotal?: SortOrder
    capacityTersisa?: SortOrder
    capacityStatus?: SortOrder
    deskripsiEvent?: SortOrder
  }

  export type AcademicEventsAvgOrderByAggregateInput = {
    idAcademicEvents?: SortOrder
    idOrganizer?: SortOrder
    registrationFee?: SortOrder
    capacityTotal?: SortOrder
    capacityTersisa?: SortOrder
  }

  export type AcademicEventsMaxOrderByAggregateInput = {
    idAcademicEvents?: SortOrder
    idOrganizer?: SortOrder
    eventsName?: SortOrder
    eventsLoc?: SortOrder
    eventsJenjang?: SortOrder
    eventsHeld?: SortOrder
    eventCategory?: SortOrder
    eventsDate?: SortOrder
    registrationDate?: SortOrder
    eventsTheme?: SortOrder
    registrationFee?: SortOrder
    capacityTotal?: SortOrder
    capacityTersisa?: SortOrder
    capacityStatus?: SortOrder
    deskripsiEvent?: SortOrder
  }

  export type AcademicEventsMinOrderByAggregateInput = {
    idAcademicEvents?: SortOrder
    idOrganizer?: SortOrder
    eventsName?: SortOrder
    eventsLoc?: SortOrder
    eventsJenjang?: SortOrder
    eventsHeld?: SortOrder
    eventCategory?: SortOrder
    eventsDate?: SortOrder
    registrationDate?: SortOrder
    eventsTheme?: SortOrder
    registrationFee?: SortOrder
    capacityTotal?: SortOrder
    capacityTersisa?: SortOrder
    capacityStatus?: SortOrder
    deskripsiEvent?: SortOrder
  }

  export type AcademicEventsSumOrderByAggregateInput = {
    idAcademicEvents?: SortOrder
    idOrganizer?: SortOrder
    registrationFee?: SortOrder
    capacityTotal?: SortOrder
    capacityTersisa?: SortOrder
  }

  export type EnumEventJenjangWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventJenjang | EnumEventJenjangFieldRefInput<$PrismaModel>
    in?: $Enums.EventJenjang[]
    notIn?: $Enums.EventJenjang[]
    not?: NestedEnumEventJenjangWithAggregatesFilter<$PrismaModel> | $Enums.EventJenjang
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventJenjangFilter<$PrismaModel>
    _max?: NestedEnumEventJenjangFilter<$PrismaModel>
  }

  export type EnumEventHeldWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventHeld | EnumEventHeldFieldRefInput<$PrismaModel>
    in?: $Enums.EventHeld[]
    notIn?: $Enums.EventHeld[]
    not?: NestedEnumEventHeldWithAggregatesFilter<$PrismaModel> | $Enums.EventHeld
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventHeldFilter<$PrismaModel>
    _max?: NestedEnumEventHeldFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumCapacityStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CapacityStatus | EnumCapacityStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CapacityStatus[]
    notIn?: $Enums.CapacityStatus[]
    not?: NestedEnumCapacityStatusWithAggregatesFilter<$PrismaModel> | $Enums.CapacityStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCapacityStatusFilter<$PrismaModel>
    _max?: NestedEnumCapacityStatusFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type AcademicEventsScalarRelationFilter = {
    is?: AcademicEventsWhereInput
    isNot?: AcademicEventsWhereInput
  }

  export type UserJoinAcademicEventsCountOrderByAggregateInput = {
    idUserJoinAcademicEvents?: SortOrder
    idUser?: SortOrder
    idAcademicEvents?: SortOrder
  }

  export type UserJoinAcademicEventsAvgOrderByAggregateInput = {
    idUserJoinAcademicEvents?: SortOrder
    idUser?: SortOrder
    idAcademicEvents?: SortOrder
  }

  export type UserJoinAcademicEventsMaxOrderByAggregateInput = {
    idUserJoinAcademicEvents?: SortOrder
    idUser?: SortOrder
    idAcademicEvents?: SortOrder
  }

  export type UserJoinAcademicEventsMinOrderByAggregateInput = {
    idUserJoinAcademicEvents?: SortOrder
    idUser?: SortOrder
    idAcademicEvents?: SortOrder
  }

  export type UserJoinAcademicEventsSumOrderByAggregateInput = {
    idUserJoinAcademicEvents?: SortOrder
    idUser?: SortOrder
    idAcademicEvents?: SortOrder
  }

  export type UserJoinAcademicEventsCreateNestedManyWithoutUserInput = {
    create?: XOR<UserJoinAcademicEventsCreateWithoutUserInput, UserJoinAcademicEventsUncheckedCreateWithoutUserInput> | UserJoinAcademicEventsCreateWithoutUserInput[] | UserJoinAcademicEventsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserJoinAcademicEventsCreateOrConnectWithoutUserInput | UserJoinAcademicEventsCreateOrConnectWithoutUserInput[]
    createMany?: UserJoinAcademicEventsCreateManyUserInputEnvelope
    connect?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
  }

  export type UserJoinAcademicEventsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserJoinAcademicEventsCreateWithoutUserInput, UserJoinAcademicEventsUncheckedCreateWithoutUserInput> | UserJoinAcademicEventsCreateWithoutUserInput[] | UserJoinAcademicEventsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserJoinAcademicEventsCreateOrConnectWithoutUserInput | UserJoinAcademicEventsCreateOrConnectWithoutUserInput[]
    createMany?: UserJoinAcademicEventsCreateManyUserInputEnvelope
    connect?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserJoinAcademicEventsUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserJoinAcademicEventsCreateWithoutUserInput, UserJoinAcademicEventsUncheckedCreateWithoutUserInput> | UserJoinAcademicEventsCreateWithoutUserInput[] | UserJoinAcademicEventsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserJoinAcademicEventsCreateOrConnectWithoutUserInput | UserJoinAcademicEventsCreateOrConnectWithoutUserInput[]
    upsert?: UserJoinAcademicEventsUpsertWithWhereUniqueWithoutUserInput | UserJoinAcademicEventsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserJoinAcademicEventsCreateManyUserInputEnvelope
    set?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
    disconnect?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
    delete?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
    connect?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
    update?: UserJoinAcademicEventsUpdateWithWhereUniqueWithoutUserInput | UserJoinAcademicEventsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserJoinAcademicEventsUpdateManyWithWhereWithoutUserInput | UserJoinAcademicEventsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserJoinAcademicEventsScalarWhereInput | UserJoinAcademicEventsScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserJoinAcademicEventsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserJoinAcademicEventsCreateWithoutUserInput, UserJoinAcademicEventsUncheckedCreateWithoutUserInput> | UserJoinAcademicEventsCreateWithoutUserInput[] | UserJoinAcademicEventsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserJoinAcademicEventsCreateOrConnectWithoutUserInput | UserJoinAcademicEventsCreateOrConnectWithoutUserInput[]
    upsert?: UserJoinAcademicEventsUpsertWithWhereUniqueWithoutUserInput | UserJoinAcademicEventsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserJoinAcademicEventsCreateManyUserInputEnvelope
    set?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
    disconnect?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
    delete?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
    connect?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
    update?: UserJoinAcademicEventsUpdateWithWhereUniqueWithoutUserInput | UserJoinAcademicEventsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserJoinAcademicEventsUpdateManyWithWhereWithoutUserInput | UserJoinAcademicEventsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserJoinAcademicEventsScalarWhereInput | UserJoinAcademicEventsScalarWhereInput[]
  }

  export type AcademicEventsCreateNestedManyWithoutEventOrganizerInput = {
    create?: XOR<AcademicEventsCreateWithoutEventOrganizerInput, AcademicEventsUncheckedCreateWithoutEventOrganizerInput> | AcademicEventsCreateWithoutEventOrganizerInput[] | AcademicEventsUncheckedCreateWithoutEventOrganizerInput[]
    connectOrCreate?: AcademicEventsCreateOrConnectWithoutEventOrganizerInput | AcademicEventsCreateOrConnectWithoutEventOrganizerInput[]
    createMany?: AcademicEventsCreateManyEventOrganizerInputEnvelope
    connect?: AcademicEventsWhereUniqueInput | AcademicEventsWhereUniqueInput[]
  }

  export type AcademicEventsUncheckedCreateNestedManyWithoutEventOrganizerInput = {
    create?: XOR<AcademicEventsCreateWithoutEventOrganizerInput, AcademicEventsUncheckedCreateWithoutEventOrganizerInput> | AcademicEventsCreateWithoutEventOrganizerInput[] | AcademicEventsUncheckedCreateWithoutEventOrganizerInput[]
    connectOrCreate?: AcademicEventsCreateOrConnectWithoutEventOrganizerInput | AcademicEventsCreateOrConnectWithoutEventOrganizerInput[]
    createMany?: AcademicEventsCreateManyEventOrganizerInputEnvelope
    connect?: AcademicEventsWhereUniqueInput | AcademicEventsWhereUniqueInput[]
  }

  export type AcademicEventsUpdateManyWithoutEventOrganizerNestedInput = {
    create?: XOR<AcademicEventsCreateWithoutEventOrganizerInput, AcademicEventsUncheckedCreateWithoutEventOrganizerInput> | AcademicEventsCreateWithoutEventOrganizerInput[] | AcademicEventsUncheckedCreateWithoutEventOrganizerInput[]
    connectOrCreate?: AcademicEventsCreateOrConnectWithoutEventOrganizerInput | AcademicEventsCreateOrConnectWithoutEventOrganizerInput[]
    upsert?: AcademicEventsUpsertWithWhereUniqueWithoutEventOrganizerInput | AcademicEventsUpsertWithWhereUniqueWithoutEventOrganizerInput[]
    createMany?: AcademicEventsCreateManyEventOrganizerInputEnvelope
    set?: AcademicEventsWhereUniqueInput | AcademicEventsWhereUniqueInput[]
    disconnect?: AcademicEventsWhereUniqueInput | AcademicEventsWhereUniqueInput[]
    delete?: AcademicEventsWhereUniqueInput | AcademicEventsWhereUniqueInput[]
    connect?: AcademicEventsWhereUniqueInput | AcademicEventsWhereUniqueInput[]
    update?: AcademicEventsUpdateWithWhereUniqueWithoutEventOrganizerInput | AcademicEventsUpdateWithWhereUniqueWithoutEventOrganizerInput[]
    updateMany?: AcademicEventsUpdateManyWithWhereWithoutEventOrganizerInput | AcademicEventsUpdateManyWithWhereWithoutEventOrganizerInput[]
    deleteMany?: AcademicEventsScalarWhereInput | AcademicEventsScalarWhereInput[]
  }

  export type AcademicEventsUncheckedUpdateManyWithoutEventOrganizerNestedInput = {
    create?: XOR<AcademicEventsCreateWithoutEventOrganizerInput, AcademicEventsUncheckedCreateWithoutEventOrganizerInput> | AcademicEventsCreateWithoutEventOrganizerInput[] | AcademicEventsUncheckedCreateWithoutEventOrganizerInput[]
    connectOrCreate?: AcademicEventsCreateOrConnectWithoutEventOrganizerInput | AcademicEventsCreateOrConnectWithoutEventOrganizerInput[]
    upsert?: AcademicEventsUpsertWithWhereUniqueWithoutEventOrganizerInput | AcademicEventsUpsertWithWhereUniqueWithoutEventOrganizerInput[]
    createMany?: AcademicEventsCreateManyEventOrganizerInputEnvelope
    set?: AcademicEventsWhereUniqueInput | AcademicEventsWhereUniqueInput[]
    disconnect?: AcademicEventsWhereUniqueInput | AcademicEventsWhereUniqueInput[]
    delete?: AcademicEventsWhereUniqueInput | AcademicEventsWhereUniqueInput[]
    connect?: AcademicEventsWhereUniqueInput | AcademicEventsWhereUniqueInput[]
    update?: AcademicEventsUpdateWithWhereUniqueWithoutEventOrganizerInput | AcademicEventsUpdateWithWhereUniqueWithoutEventOrganizerInput[]
    updateMany?: AcademicEventsUpdateManyWithWhereWithoutEventOrganizerInput | AcademicEventsUpdateManyWithWhereWithoutEventOrganizerInput[]
    deleteMany?: AcademicEventsScalarWhereInput | AcademicEventsScalarWhereInput[]
  }

  export type EventOrganizerCreateNestedOneWithoutEventsInput = {
    create?: XOR<EventOrganizerCreateWithoutEventsInput, EventOrganizerUncheckedCreateWithoutEventsInput>
    connectOrCreate?: EventOrganizerCreateOrConnectWithoutEventsInput
    connect?: EventOrganizerWhereUniqueInput
  }

  export type UserJoinAcademicEventsCreateNestedManyWithoutAcademicEventInput = {
    create?: XOR<UserJoinAcademicEventsCreateWithoutAcademicEventInput, UserJoinAcademicEventsUncheckedCreateWithoutAcademicEventInput> | UserJoinAcademicEventsCreateWithoutAcademicEventInput[] | UserJoinAcademicEventsUncheckedCreateWithoutAcademicEventInput[]
    connectOrCreate?: UserJoinAcademicEventsCreateOrConnectWithoutAcademicEventInput | UserJoinAcademicEventsCreateOrConnectWithoutAcademicEventInput[]
    createMany?: UserJoinAcademicEventsCreateManyAcademicEventInputEnvelope
    connect?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
  }

  export type UserJoinAcademicEventsUncheckedCreateNestedManyWithoutAcademicEventInput = {
    create?: XOR<UserJoinAcademicEventsCreateWithoutAcademicEventInput, UserJoinAcademicEventsUncheckedCreateWithoutAcademicEventInput> | UserJoinAcademicEventsCreateWithoutAcademicEventInput[] | UserJoinAcademicEventsUncheckedCreateWithoutAcademicEventInput[]
    connectOrCreate?: UserJoinAcademicEventsCreateOrConnectWithoutAcademicEventInput | UserJoinAcademicEventsCreateOrConnectWithoutAcademicEventInput[]
    createMany?: UserJoinAcademicEventsCreateManyAcademicEventInputEnvelope
    connect?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
  }

  export type EnumEventJenjangFieldUpdateOperationsInput = {
    set?: $Enums.EventJenjang
  }

  export type EnumEventHeldFieldUpdateOperationsInput = {
    set?: $Enums.EventHeld
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumCapacityStatusFieldUpdateOperationsInput = {
    set?: $Enums.CapacityStatus
  }

  export type EventOrganizerUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<EventOrganizerCreateWithoutEventsInput, EventOrganizerUncheckedCreateWithoutEventsInput>
    connectOrCreate?: EventOrganizerCreateOrConnectWithoutEventsInput
    upsert?: EventOrganizerUpsertWithoutEventsInput
    connect?: EventOrganizerWhereUniqueInput
    update?: XOR<XOR<EventOrganizerUpdateToOneWithWhereWithoutEventsInput, EventOrganizerUpdateWithoutEventsInput>, EventOrganizerUncheckedUpdateWithoutEventsInput>
  }

  export type UserJoinAcademicEventsUpdateManyWithoutAcademicEventNestedInput = {
    create?: XOR<UserJoinAcademicEventsCreateWithoutAcademicEventInput, UserJoinAcademicEventsUncheckedCreateWithoutAcademicEventInput> | UserJoinAcademicEventsCreateWithoutAcademicEventInput[] | UserJoinAcademicEventsUncheckedCreateWithoutAcademicEventInput[]
    connectOrCreate?: UserJoinAcademicEventsCreateOrConnectWithoutAcademicEventInput | UserJoinAcademicEventsCreateOrConnectWithoutAcademicEventInput[]
    upsert?: UserJoinAcademicEventsUpsertWithWhereUniqueWithoutAcademicEventInput | UserJoinAcademicEventsUpsertWithWhereUniqueWithoutAcademicEventInput[]
    createMany?: UserJoinAcademicEventsCreateManyAcademicEventInputEnvelope
    set?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
    disconnect?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
    delete?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
    connect?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
    update?: UserJoinAcademicEventsUpdateWithWhereUniqueWithoutAcademicEventInput | UserJoinAcademicEventsUpdateWithWhereUniqueWithoutAcademicEventInput[]
    updateMany?: UserJoinAcademicEventsUpdateManyWithWhereWithoutAcademicEventInput | UserJoinAcademicEventsUpdateManyWithWhereWithoutAcademicEventInput[]
    deleteMany?: UserJoinAcademicEventsScalarWhereInput | UserJoinAcademicEventsScalarWhereInput[]
  }

  export type UserJoinAcademicEventsUncheckedUpdateManyWithoutAcademicEventNestedInput = {
    create?: XOR<UserJoinAcademicEventsCreateWithoutAcademicEventInput, UserJoinAcademicEventsUncheckedCreateWithoutAcademicEventInput> | UserJoinAcademicEventsCreateWithoutAcademicEventInput[] | UserJoinAcademicEventsUncheckedCreateWithoutAcademicEventInput[]
    connectOrCreate?: UserJoinAcademicEventsCreateOrConnectWithoutAcademicEventInput | UserJoinAcademicEventsCreateOrConnectWithoutAcademicEventInput[]
    upsert?: UserJoinAcademicEventsUpsertWithWhereUniqueWithoutAcademicEventInput | UserJoinAcademicEventsUpsertWithWhereUniqueWithoutAcademicEventInput[]
    createMany?: UserJoinAcademicEventsCreateManyAcademicEventInputEnvelope
    set?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
    disconnect?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
    delete?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
    connect?: UserJoinAcademicEventsWhereUniqueInput | UserJoinAcademicEventsWhereUniqueInput[]
    update?: UserJoinAcademicEventsUpdateWithWhereUniqueWithoutAcademicEventInput | UserJoinAcademicEventsUpdateWithWhereUniqueWithoutAcademicEventInput[]
    updateMany?: UserJoinAcademicEventsUpdateManyWithWhereWithoutAcademicEventInput | UserJoinAcademicEventsUpdateManyWithWhereWithoutAcademicEventInput[]
    deleteMany?: UserJoinAcademicEventsScalarWhereInput | UserJoinAcademicEventsScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserAcademicEventsInput = {
    create?: XOR<UserCreateWithoutUserAcademicEventsInput, UserUncheckedCreateWithoutUserAcademicEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserAcademicEventsInput
    connect?: UserWhereUniqueInput
  }

  export type AcademicEventsCreateNestedOneWithoutUserJoinsInput = {
    create?: XOR<AcademicEventsCreateWithoutUserJoinsInput, AcademicEventsUncheckedCreateWithoutUserJoinsInput>
    connectOrCreate?: AcademicEventsCreateOrConnectWithoutUserJoinsInput
    connect?: AcademicEventsWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutUserAcademicEventsNestedInput = {
    create?: XOR<UserCreateWithoutUserAcademicEventsInput, UserUncheckedCreateWithoutUserAcademicEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserAcademicEventsInput
    upsert?: UserUpsertWithoutUserAcademicEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserAcademicEventsInput, UserUpdateWithoutUserAcademicEventsInput>, UserUncheckedUpdateWithoutUserAcademicEventsInput>
  }

  export type AcademicEventsUpdateOneRequiredWithoutUserJoinsNestedInput = {
    create?: XOR<AcademicEventsCreateWithoutUserJoinsInput, AcademicEventsUncheckedCreateWithoutUserJoinsInput>
    connectOrCreate?: AcademicEventsCreateOrConnectWithoutUserJoinsInput
    upsert?: AcademicEventsUpsertWithoutUserJoinsInput
    connect?: AcademicEventsWhereUniqueInput
    update?: XOR<XOR<AcademicEventsUpdateToOneWithWhereWithoutUserJoinsInput, AcademicEventsUpdateWithoutUserJoinsInput>, AcademicEventsUncheckedUpdateWithoutUserJoinsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[]
    notIn?: $Enums.Gender[]
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumEventJenjangFilter<$PrismaModel = never> = {
    equals?: $Enums.EventJenjang | EnumEventJenjangFieldRefInput<$PrismaModel>
    in?: $Enums.EventJenjang[]
    notIn?: $Enums.EventJenjang[]
    not?: NestedEnumEventJenjangFilter<$PrismaModel> | $Enums.EventJenjang
  }

  export type NestedEnumEventHeldFilter<$PrismaModel = never> = {
    equals?: $Enums.EventHeld | EnumEventHeldFieldRefInput<$PrismaModel>
    in?: $Enums.EventHeld[]
    notIn?: $Enums.EventHeld[]
    not?: NestedEnumEventHeldFilter<$PrismaModel> | $Enums.EventHeld
  }

  export type NestedEnumCapacityStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CapacityStatus | EnumCapacityStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CapacityStatus[]
    notIn?: $Enums.CapacityStatus[]
    not?: NestedEnumCapacityStatusFilter<$PrismaModel> | $Enums.CapacityStatus
  }

  export type NestedEnumEventJenjangWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventJenjang | EnumEventJenjangFieldRefInput<$PrismaModel>
    in?: $Enums.EventJenjang[]
    notIn?: $Enums.EventJenjang[]
    not?: NestedEnumEventJenjangWithAggregatesFilter<$PrismaModel> | $Enums.EventJenjang
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventJenjangFilter<$PrismaModel>
    _max?: NestedEnumEventJenjangFilter<$PrismaModel>
  }

  export type NestedEnumEventHeldWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.EventHeld | EnumEventHeldFieldRefInput<$PrismaModel>
    in?: $Enums.EventHeld[]
    notIn?: $Enums.EventHeld[]
    not?: NestedEnumEventHeldWithAggregatesFilter<$PrismaModel> | $Enums.EventHeld
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumEventHeldFilter<$PrismaModel>
    _max?: NestedEnumEventHeldFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumCapacityStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CapacityStatus | EnumCapacityStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CapacityStatus[]
    notIn?: $Enums.CapacityStatus[]
    not?: NestedEnumCapacityStatusWithAggregatesFilter<$PrismaModel> | $Enums.CapacityStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCapacityStatusFilter<$PrismaModel>
    _max?: NestedEnumCapacityStatusFilter<$PrismaModel>
  }

  export type UserJoinAcademicEventsCreateWithoutUserInput = {
    academicEvent: AcademicEventsCreateNestedOneWithoutUserJoinsInput
  }

  export type UserJoinAcademicEventsUncheckedCreateWithoutUserInput = {
    idUserJoinAcademicEvents?: number
    idAcademicEvents: number
  }

  export type UserJoinAcademicEventsCreateOrConnectWithoutUserInput = {
    where: UserJoinAcademicEventsWhereUniqueInput
    create: XOR<UserJoinAcademicEventsCreateWithoutUserInput, UserJoinAcademicEventsUncheckedCreateWithoutUserInput>
  }

  export type UserJoinAcademicEventsCreateManyUserInputEnvelope = {
    data: UserJoinAcademicEventsCreateManyUserInput | UserJoinAcademicEventsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserJoinAcademicEventsUpsertWithWhereUniqueWithoutUserInput = {
    where: UserJoinAcademicEventsWhereUniqueInput
    update: XOR<UserJoinAcademicEventsUpdateWithoutUserInput, UserJoinAcademicEventsUncheckedUpdateWithoutUserInput>
    create: XOR<UserJoinAcademicEventsCreateWithoutUserInput, UserJoinAcademicEventsUncheckedCreateWithoutUserInput>
  }

  export type UserJoinAcademicEventsUpdateWithWhereUniqueWithoutUserInput = {
    where: UserJoinAcademicEventsWhereUniqueInput
    data: XOR<UserJoinAcademicEventsUpdateWithoutUserInput, UserJoinAcademicEventsUncheckedUpdateWithoutUserInput>
  }

  export type UserJoinAcademicEventsUpdateManyWithWhereWithoutUserInput = {
    where: UserJoinAcademicEventsScalarWhereInput
    data: XOR<UserJoinAcademicEventsUpdateManyMutationInput, UserJoinAcademicEventsUncheckedUpdateManyWithoutUserInput>
  }

  export type UserJoinAcademicEventsScalarWhereInput = {
    AND?: UserJoinAcademicEventsScalarWhereInput | UserJoinAcademicEventsScalarWhereInput[]
    OR?: UserJoinAcademicEventsScalarWhereInput[]
    NOT?: UserJoinAcademicEventsScalarWhereInput | UserJoinAcademicEventsScalarWhereInput[]
    idUserJoinAcademicEvents?: IntFilter<"UserJoinAcademicEvents"> | number
    idUser?: IntFilter<"UserJoinAcademicEvents"> | number
    idAcademicEvents?: IntFilter<"UserJoinAcademicEvents"> | number
  }

  export type AcademicEventsCreateWithoutEventOrganizerInput = {
    eventsName: string
    eventsLoc: string
    eventsJenjang: $Enums.EventJenjang
    eventsHeld: $Enums.EventHeld
    eventCategory: string
    eventsDate: Date | string
    registrationDate: Date | string
    eventsTheme: string
    registrationFee: number
    capacityTotal?: number | null
    capacityTersisa?: number | null
    capacityStatus: $Enums.CapacityStatus
    deskripsiEvent: string
    userJoins?: UserJoinAcademicEventsCreateNestedManyWithoutAcademicEventInput
  }

  export type AcademicEventsUncheckedCreateWithoutEventOrganizerInput = {
    idAcademicEvents?: number
    eventsName: string
    eventsLoc: string
    eventsJenjang: $Enums.EventJenjang
    eventsHeld: $Enums.EventHeld
    eventCategory: string
    eventsDate: Date | string
    registrationDate: Date | string
    eventsTheme: string
    registrationFee: number
    capacityTotal?: number | null
    capacityTersisa?: number | null
    capacityStatus: $Enums.CapacityStatus
    deskripsiEvent: string
    userJoins?: UserJoinAcademicEventsUncheckedCreateNestedManyWithoutAcademicEventInput
  }

  export type AcademicEventsCreateOrConnectWithoutEventOrganizerInput = {
    where: AcademicEventsWhereUniqueInput
    create: XOR<AcademicEventsCreateWithoutEventOrganizerInput, AcademicEventsUncheckedCreateWithoutEventOrganizerInput>
  }

  export type AcademicEventsCreateManyEventOrganizerInputEnvelope = {
    data: AcademicEventsCreateManyEventOrganizerInput | AcademicEventsCreateManyEventOrganizerInput[]
    skipDuplicates?: boolean
  }

  export type AcademicEventsUpsertWithWhereUniqueWithoutEventOrganizerInput = {
    where: AcademicEventsWhereUniqueInput
    update: XOR<AcademicEventsUpdateWithoutEventOrganizerInput, AcademicEventsUncheckedUpdateWithoutEventOrganizerInput>
    create: XOR<AcademicEventsCreateWithoutEventOrganizerInput, AcademicEventsUncheckedCreateWithoutEventOrganizerInput>
  }

  export type AcademicEventsUpdateWithWhereUniqueWithoutEventOrganizerInput = {
    where: AcademicEventsWhereUniqueInput
    data: XOR<AcademicEventsUpdateWithoutEventOrganizerInput, AcademicEventsUncheckedUpdateWithoutEventOrganizerInput>
  }

  export type AcademicEventsUpdateManyWithWhereWithoutEventOrganizerInput = {
    where: AcademicEventsScalarWhereInput
    data: XOR<AcademicEventsUpdateManyMutationInput, AcademicEventsUncheckedUpdateManyWithoutEventOrganizerInput>
  }

  export type AcademicEventsScalarWhereInput = {
    AND?: AcademicEventsScalarWhereInput | AcademicEventsScalarWhereInput[]
    OR?: AcademicEventsScalarWhereInput[]
    NOT?: AcademicEventsScalarWhereInput | AcademicEventsScalarWhereInput[]
    idAcademicEvents?: IntFilter<"AcademicEvents"> | number
    idOrganizer?: IntFilter<"AcademicEvents"> | number
    eventsName?: StringFilter<"AcademicEvents"> | string
    eventsLoc?: StringFilter<"AcademicEvents"> | string
    eventsJenjang?: EnumEventJenjangFilter<"AcademicEvents"> | $Enums.EventJenjang
    eventsHeld?: EnumEventHeldFilter<"AcademicEvents"> | $Enums.EventHeld
    eventCategory?: StringFilter<"AcademicEvents"> | string
    eventsDate?: DateTimeFilter<"AcademicEvents"> | Date | string
    registrationDate?: DateTimeFilter<"AcademicEvents"> | Date | string
    eventsTheme?: StringFilter<"AcademicEvents"> | string
    registrationFee?: FloatFilter<"AcademicEvents"> | number
    capacityTotal?: IntNullableFilter<"AcademicEvents"> | number | null
    capacityTersisa?: IntNullableFilter<"AcademicEvents"> | number | null
    capacityStatus?: EnumCapacityStatusFilter<"AcademicEvents"> | $Enums.CapacityStatus
    deskripsiEvent?: StringFilter<"AcademicEvents"> | string
  }

  export type EventOrganizerCreateWithoutEventsInput = {
    email: string
    password: string
    organizerName: string
    organizerInstitution: string
    organizerAddress: string
    phoneNumber: string
  }

  export type EventOrganizerUncheckedCreateWithoutEventsInput = {
    idOrganizer?: number
    email: string
    password: string
    organizerName: string
    organizerInstitution: string
    organizerAddress: string
    phoneNumber: string
  }

  export type EventOrganizerCreateOrConnectWithoutEventsInput = {
    where: EventOrganizerWhereUniqueInput
    create: XOR<EventOrganizerCreateWithoutEventsInput, EventOrganizerUncheckedCreateWithoutEventsInput>
  }

  export type UserJoinAcademicEventsCreateWithoutAcademicEventInput = {
    user: UserCreateNestedOneWithoutUserAcademicEventsInput
  }

  export type UserJoinAcademicEventsUncheckedCreateWithoutAcademicEventInput = {
    idUserJoinAcademicEvents?: number
    idUser: number
  }

  export type UserJoinAcademicEventsCreateOrConnectWithoutAcademicEventInput = {
    where: UserJoinAcademicEventsWhereUniqueInput
    create: XOR<UserJoinAcademicEventsCreateWithoutAcademicEventInput, UserJoinAcademicEventsUncheckedCreateWithoutAcademicEventInput>
  }

  export type UserJoinAcademicEventsCreateManyAcademicEventInputEnvelope = {
    data: UserJoinAcademicEventsCreateManyAcademicEventInput | UserJoinAcademicEventsCreateManyAcademicEventInput[]
    skipDuplicates?: boolean
  }

  export type EventOrganizerUpsertWithoutEventsInput = {
    update: XOR<EventOrganizerUpdateWithoutEventsInput, EventOrganizerUncheckedUpdateWithoutEventsInput>
    create: XOR<EventOrganizerCreateWithoutEventsInput, EventOrganizerUncheckedCreateWithoutEventsInput>
    where?: EventOrganizerWhereInput
  }

  export type EventOrganizerUpdateToOneWithWhereWithoutEventsInput = {
    where?: EventOrganizerWhereInput
    data: XOR<EventOrganizerUpdateWithoutEventsInput, EventOrganizerUncheckedUpdateWithoutEventsInput>
  }

  export type EventOrganizerUpdateWithoutEventsInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    organizerName?: StringFieldUpdateOperationsInput | string
    organizerInstitution?: StringFieldUpdateOperationsInput | string
    organizerAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
  }

  export type EventOrganizerUncheckedUpdateWithoutEventsInput = {
    idOrganizer?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    organizerName?: StringFieldUpdateOperationsInput | string
    organizerInstitution?: StringFieldUpdateOperationsInput | string
    organizerAddress?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
  }

  export type UserJoinAcademicEventsUpsertWithWhereUniqueWithoutAcademicEventInput = {
    where: UserJoinAcademicEventsWhereUniqueInput
    update: XOR<UserJoinAcademicEventsUpdateWithoutAcademicEventInput, UserJoinAcademicEventsUncheckedUpdateWithoutAcademicEventInput>
    create: XOR<UserJoinAcademicEventsCreateWithoutAcademicEventInput, UserJoinAcademicEventsUncheckedCreateWithoutAcademicEventInput>
  }

  export type UserJoinAcademicEventsUpdateWithWhereUniqueWithoutAcademicEventInput = {
    where: UserJoinAcademicEventsWhereUniqueInput
    data: XOR<UserJoinAcademicEventsUpdateWithoutAcademicEventInput, UserJoinAcademicEventsUncheckedUpdateWithoutAcademicEventInput>
  }

  export type UserJoinAcademicEventsUpdateManyWithWhereWithoutAcademicEventInput = {
    where: UserJoinAcademicEventsScalarWhereInput
    data: XOR<UserJoinAcademicEventsUpdateManyMutationInput, UserJoinAcademicEventsUncheckedUpdateManyWithoutAcademicEventInput>
  }

  export type UserCreateWithoutUserAcademicEventsInput = {
    firstName: string
    lastName: string
    email: string
    password: string
    phoneNumber: string
    elementarySchool: string
    juniorHighSchool: string
    seniorHighSchool: string
    university: string
    gender: $Enums.Gender
    about: string
    birthdate: Date | string
    refreshToken?: string | null
  }

  export type UserUncheckedCreateWithoutUserAcademicEventsInput = {
    idUser?: number
    firstName: string
    lastName: string
    email: string
    password: string
    phoneNumber: string
    elementarySchool: string
    juniorHighSchool: string
    seniorHighSchool: string
    university: string
    gender: $Enums.Gender
    about: string
    birthdate: Date | string
    refreshToken?: string | null
  }

  export type UserCreateOrConnectWithoutUserAcademicEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserAcademicEventsInput, UserUncheckedCreateWithoutUserAcademicEventsInput>
  }

  export type AcademicEventsCreateWithoutUserJoinsInput = {
    eventsName: string
    eventsLoc: string
    eventsJenjang: $Enums.EventJenjang
    eventsHeld: $Enums.EventHeld
    eventCategory: string
    eventsDate: Date | string
    registrationDate: Date | string
    eventsTheme: string
    registrationFee: number
    capacityTotal?: number | null
    capacityTersisa?: number | null
    capacityStatus: $Enums.CapacityStatus
    deskripsiEvent: string
    eventOrganizer: EventOrganizerCreateNestedOneWithoutEventsInput
  }

  export type AcademicEventsUncheckedCreateWithoutUserJoinsInput = {
    idAcademicEvents?: number
    idOrganizer: number
    eventsName: string
    eventsLoc: string
    eventsJenjang: $Enums.EventJenjang
    eventsHeld: $Enums.EventHeld
    eventCategory: string
    eventsDate: Date | string
    registrationDate: Date | string
    eventsTheme: string
    registrationFee: number
    capacityTotal?: number | null
    capacityTersisa?: number | null
    capacityStatus: $Enums.CapacityStatus
    deskripsiEvent: string
  }

  export type AcademicEventsCreateOrConnectWithoutUserJoinsInput = {
    where: AcademicEventsWhereUniqueInput
    create: XOR<AcademicEventsCreateWithoutUserJoinsInput, AcademicEventsUncheckedCreateWithoutUserJoinsInput>
  }

  export type UserUpsertWithoutUserAcademicEventsInput = {
    update: XOR<UserUpdateWithoutUserAcademicEventsInput, UserUncheckedUpdateWithoutUserAcademicEventsInput>
    create: XOR<UserCreateWithoutUserAcademicEventsInput, UserUncheckedCreateWithoutUserAcademicEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserAcademicEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserAcademicEventsInput, UserUncheckedUpdateWithoutUserAcademicEventsInput>
  }

  export type UserUpdateWithoutUserAcademicEventsInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    elementarySchool?: StringFieldUpdateOperationsInput | string
    juniorHighSchool?: StringFieldUpdateOperationsInput | string
    seniorHighSchool?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    about?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutUserAcademicEventsInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    elementarySchool?: StringFieldUpdateOperationsInput | string
    juniorHighSchool?: StringFieldUpdateOperationsInput | string
    seniorHighSchool?: StringFieldUpdateOperationsInput | string
    university?: StringFieldUpdateOperationsInput | string
    gender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    about?: StringFieldUpdateOperationsInput | string
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AcademicEventsUpsertWithoutUserJoinsInput = {
    update: XOR<AcademicEventsUpdateWithoutUserJoinsInput, AcademicEventsUncheckedUpdateWithoutUserJoinsInput>
    create: XOR<AcademicEventsCreateWithoutUserJoinsInput, AcademicEventsUncheckedCreateWithoutUserJoinsInput>
    where?: AcademicEventsWhereInput
  }

  export type AcademicEventsUpdateToOneWithWhereWithoutUserJoinsInput = {
    where?: AcademicEventsWhereInput
    data: XOR<AcademicEventsUpdateWithoutUserJoinsInput, AcademicEventsUncheckedUpdateWithoutUserJoinsInput>
  }

  export type AcademicEventsUpdateWithoutUserJoinsInput = {
    eventsName?: StringFieldUpdateOperationsInput | string
    eventsLoc?: StringFieldUpdateOperationsInput | string
    eventsJenjang?: EnumEventJenjangFieldUpdateOperationsInput | $Enums.EventJenjang
    eventsHeld?: EnumEventHeldFieldUpdateOperationsInput | $Enums.EventHeld
    eventCategory?: StringFieldUpdateOperationsInput | string
    eventsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    eventsTheme?: StringFieldUpdateOperationsInput | string
    registrationFee?: FloatFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    capacityTersisa?: NullableIntFieldUpdateOperationsInput | number | null
    capacityStatus?: EnumCapacityStatusFieldUpdateOperationsInput | $Enums.CapacityStatus
    deskripsiEvent?: StringFieldUpdateOperationsInput | string
    eventOrganizer?: EventOrganizerUpdateOneRequiredWithoutEventsNestedInput
  }

  export type AcademicEventsUncheckedUpdateWithoutUserJoinsInput = {
    idAcademicEvents?: IntFieldUpdateOperationsInput | number
    idOrganizer?: IntFieldUpdateOperationsInput | number
    eventsName?: StringFieldUpdateOperationsInput | string
    eventsLoc?: StringFieldUpdateOperationsInput | string
    eventsJenjang?: EnumEventJenjangFieldUpdateOperationsInput | $Enums.EventJenjang
    eventsHeld?: EnumEventHeldFieldUpdateOperationsInput | $Enums.EventHeld
    eventCategory?: StringFieldUpdateOperationsInput | string
    eventsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    eventsTheme?: StringFieldUpdateOperationsInput | string
    registrationFee?: FloatFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    capacityTersisa?: NullableIntFieldUpdateOperationsInput | number | null
    capacityStatus?: EnumCapacityStatusFieldUpdateOperationsInput | $Enums.CapacityStatus
    deskripsiEvent?: StringFieldUpdateOperationsInput | string
  }

  export type UserJoinAcademicEventsCreateManyUserInput = {
    idUserJoinAcademicEvents?: number
    idAcademicEvents: number
  }

  export type UserJoinAcademicEventsUpdateWithoutUserInput = {
    academicEvent?: AcademicEventsUpdateOneRequiredWithoutUserJoinsNestedInput
  }

  export type UserJoinAcademicEventsUncheckedUpdateWithoutUserInput = {
    idUserJoinAcademicEvents?: IntFieldUpdateOperationsInput | number
    idAcademicEvents?: IntFieldUpdateOperationsInput | number
  }

  export type UserJoinAcademicEventsUncheckedUpdateManyWithoutUserInput = {
    idUserJoinAcademicEvents?: IntFieldUpdateOperationsInput | number
    idAcademicEvents?: IntFieldUpdateOperationsInput | number
  }

  export type AcademicEventsCreateManyEventOrganizerInput = {
    idAcademicEvents?: number
    eventsName: string
    eventsLoc: string
    eventsJenjang: $Enums.EventJenjang
    eventsHeld: $Enums.EventHeld
    eventCategory: string
    eventsDate: Date | string
    registrationDate: Date | string
    eventsTheme: string
    registrationFee: number
    capacityTotal?: number | null
    capacityTersisa?: number | null
    capacityStatus: $Enums.CapacityStatus
    deskripsiEvent: string
  }

  export type AcademicEventsUpdateWithoutEventOrganizerInput = {
    eventsName?: StringFieldUpdateOperationsInput | string
    eventsLoc?: StringFieldUpdateOperationsInput | string
    eventsJenjang?: EnumEventJenjangFieldUpdateOperationsInput | $Enums.EventJenjang
    eventsHeld?: EnumEventHeldFieldUpdateOperationsInput | $Enums.EventHeld
    eventCategory?: StringFieldUpdateOperationsInput | string
    eventsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    eventsTheme?: StringFieldUpdateOperationsInput | string
    registrationFee?: FloatFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    capacityTersisa?: NullableIntFieldUpdateOperationsInput | number | null
    capacityStatus?: EnumCapacityStatusFieldUpdateOperationsInput | $Enums.CapacityStatus
    deskripsiEvent?: StringFieldUpdateOperationsInput | string
    userJoins?: UserJoinAcademicEventsUpdateManyWithoutAcademicEventNestedInput
  }

  export type AcademicEventsUncheckedUpdateWithoutEventOrganizerInput = {
    idAcademicEvents?: IntFieldUpdateOperationsInput | number
    eventsName?: StringFieldUpdateOperationsInput | string
    eventsLoc?: StringFieldUpdateOperationsInput | string
    eventsJenjang?: EnumEventJenjangFieldUpdateOperationsInput | $Enums.EventJenjang
    eventsHeld?: EnumEventHeldFieldUpdateOperationsInput | $Enums.EventHeld
    eventCategory?: StringFieldUpdateOperationsInput | string
    eventsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    eventsTheme?: StringFieldUpdateOperationsInput | string
    registrationFee?: FloatFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    capacityTersisa?: NullableIntFieldUpdateOperationsInput | number | null
    capacityStatus?: EnumCapacityStatusFieldUpdateOperationsInput | $Enums.CapacityStatus
    deskripsiEvent?: StringFieldUpdateOperationsInput | string
    userJoins?: UserJoinAcademicEventsUncheckedUpdateManyWithoutAcademicEventNestedInput
  }

  export type AcademicEventsUncheckedUpdateManyWithoutEventOrganizerInput = {
    idAcademicEvents?: IntFieldUpdateOperationsInput | number
    eventsName?: StringFieldUpdateOperationsInput | string
    eventsLoc?: StringFieldUpdateOperationsInput | string
    eventsJenjang?: EnumEventJenjangFieldUpdateOperationsInput | $Enums.EventJenjang
    eventsHeld?: EnumEventHeldFieldUpdateOperationsInput | $Enums.EventHeld
    eventCategory?: StringFieldUpdateOperationsInput | string
    eventsDate?: DateTimeFieldUpdateOperationsInput | Date | string
    registrationDate?: DateTimeFieldUpdateOperationsInput | Date | string
    eventsTheme?: StringFieldUpdateOperationsInput | string
    registrationFee?: FloatFieldUpdateOperationsInput | number
    capacityTotal?: NullableIntFieldUpdateOperationsInput | number | null
    capacityTersisa?: NullableIntFieldUpdateOperationsInput | number | null
    capacityStatus?: EnumCapacityStatusFieldUpdateOperationsInput | $Enums.CapacityStatus
    deskripsiEvent?: StringFieldUpdateOperationsInput | string
  }

  export type UserJoinAcademicEventsCreateManyAcademicEventInput = {
    idUserJoinAcademicEvents?: number
    idUser: number
  }

  export type UserJoinAcademicEventsUpdateWithoutAcademicEventInput = {
    user?: UserUpdateOneRequiredWithoutUserAcademicEventsNestedInput
  }

  export type UserJoinAcademicEventsUncheckedUpdateWithoutAcademicEventInput = {
    idUserJoinAcademicEvents?: IntFieldUpdateOperationsInput | number
    idUser?: IntFieldUpdateOperationsInput | number
  }

  export type UserJoinAcademicEventsUncheckedUpdateManyWithoutAcademicEventInput = {
    idUserJoinAcademicEvents?: IntFieldUpdateOperationsInput | number
    idUser?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}